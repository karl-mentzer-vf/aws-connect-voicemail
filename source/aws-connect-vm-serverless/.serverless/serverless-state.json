{
  "service": {
    "service": "aws-connect-vm",
    "serviceObject": {
      "name": "aws-connect-vm"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "versionFunctions": false,
      "stage": "prod",
      "region": "us-east-1",
      "timeout": 30,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Amazon Connect Voicemail Stack",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ContactVoicemailStreamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-ContactVoicemailStream"
            }
          },
          "TranscriptionEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-TranscriptionEvents"
            }
          },
          "GetAgentByExtensionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-GetAgentByExtension"
            }
          },
          "CognitoUsersConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-CognitoUsersConfig"
            }
          },
          "AuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-Authorizer"
            }
          },
          "AgentsGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-AgentsGet"
            }
          },
          "AgentsUpdateByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-AgentsUpdateById"
            }
          },
          "AgentsGetByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-AgentsGetById"
            }
          },
          "GlobalSettingsUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-GlobalSettingsUpdate"
            }
          },
          "GlobalSettingsGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-GlobalSettingsGet"
            }
          },
          "BuildContactFlowLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-BuildContactFlow"
            }
          },
          "KvsProcessRecordingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-KvsProcessRecording"
            }
          },
          "ConnectSyncRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-ConnectSyncRequest"
            }
          },
          "ConnectSyncLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-connect-vm-prod-ConnectSync"
            }
          },
          "ContactVoicemailStreamLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/voicemail.stream",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-ContactVoicemailStream",
              "MemorySize": 1024,
              "Timeout": 30,
              "Description": "AWS Lambda Function that will be triggered when records are written into the ContactVoicemail Table.\n",
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "GLOBAL_TABLE_NAME": {
                    "Ref": "GlobalTable"
                  },
                  "CONTACT_VOICEMAIL_TABLE_NAME": {
                    "Ref": "ContactVoicemailTable"
                  },
                  "SIGNED_RECORDING_URL_EXP": {
                    "Ref": "SignedRecordingUrlExpiration"
                  },
                  "DELIVERY_EMAIL": {
                    "Ref": "DeliveryEmail"
                  },
                  "AVAILABLE_SMS_COUNTRIES": {
                    "Ref": "AvailableSMSCountries"
                  },
                  "SECRET_ARN": {
                    "Ref": "VoicemailSecret"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ContactVoicemailStreamIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ContactVoicemailStreamLogGroup",
              "ContactVoicemailStreamIamRole"
            ]
          },
          "TranscriptionEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/transcription.process",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-TranscriptionEvents",
              "MemorySize": 1024,
              "Timeout": 30,
              "Description": "AWS Lambda Function that will be triggered when transcription status changes.\n",
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "GLOBAL_TABLE_NAME": {
                    "Ref": "GlobalTable"
                  },
                  "CONTACT_VOICEMAIL_TABLE_NAME": {
                    "Ref": "ContactVoicemailTable"
                  },
                  "SIGNED_RECORDING_URL_EXP": {
                    "Ref": "SignedRecordingUrlExpiration"
                  },
                  "AVAILABLE_SMS_COUNTRIES": {
                    "Ref": "AvailableSMSCountries"
                  },
                  "SECRET_ARN": {
                    "Ref": "VoicemailSecret"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "TranscriptionEventsIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TranscriptionEventsLogGroup",
              "TranscriptionEventsIamRole"
            ]
          },
          "GetAgentByExtensionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/agents.getAgentByExtension",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-GetAgentByExtension",
              "MemorySize": 1024,
              "Timeout": 30,
              "Description": "AWS Lambda Function that will be triggered when dialog flow needs to get agent's information based on phone extension\n",
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GetAgentByExtensionIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAgentByExtensionLogGroup",
              "GetAgentByExtensionIamRole"
            ]
          },
          "CognitoUsersConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/cognito.usersConfig",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-CognitoUsersConfig",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "GLOBAL_TABLE_NAME": {
                    "Ref": "GlobalTable"
                  },
                  "AVAILABLE_SMS_COUNTRIES": {
                    "Ref": "AvailableSMSCountries"
                  },
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "CognitoUserPoolUserPool"
                  },
                  "DELIVERY_EMAIL": {
                    "Ref": "DeliveryEmail"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "CognitoUsersConfigIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CognitoUsersConfigLogGroup",
              "CognitoUsersConfigIamRole"
            ]
          },
          "AuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/authorizer.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-Authorizer",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "CognitoUserPoolUserPool"
                  },
                  "APP_REGION": {
                    "Ref": "AWS::Region"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "AuthorizerIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizerLogGroup",
              "AuthorizerIamRole"
            ]
          },
          "AgentsGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/agents.getAgents",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-AgentsGet",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "AgentsGetIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgentsGetLogGroup",
              "AgentsGetIamRole"
            ]
          },
          "AgentsUpdateByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/agents.updateAgentById",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-AgentsUpdateById",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "AgentsUpdateByIdIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgentsUpdateByIdLogGroup",
              "AgentsUpdateByIdIamRole"
            ]
          },
          "AgentsGetByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/agents.getAgentById",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-AgentsGetById",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "AgentsGetByIdIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgentsGetByIdLogGroup",
              "AgentsGetByIdIamRole"
            ]
          },
          "GlobalSettingsUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/global-settings.update",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-GlobalSettingsUpdate",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "GLOBAL_TABLE_NAME": {
                    "Ref": "GlobalTable"
                  },
                  "AVAILABLE_SMS_COUNTRIES": {
                    "Ref": "AvailableSMSCountries"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GlobalSettingsUpdateIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GlobalSettingsUpdateLogGroup",
              "GlobalSettingsUpdateIamRole"
            ]
          },
          "GlobalSettingsGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/global-settings.get",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-GlobalSettingsGet",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "GLOBAL_TABLE_NAME": {
                    "Ref": "GlobalTable"
                  },
                  "AVAILABLE_SMS_COUNTRIES": {
                    "Ref": "AvailableSMSCountries"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GlobalSettingsGetIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GlobalSettingsGetLogGroup",
              "GlobalSettingsGetIamRole"
            ]
          },
          "BuildContactFlowLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/contact-flow.build",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-BuildContactFlow",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "GET_AGENT_BY_EXTENSION_LAMBDA_ARN": {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAgentByExtensionLambdaFunction}"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "SOLUTION_ID": {
                    "Ref": "SolutionId"
                  },
                  "UUID": {
                    "Ref": "Uuid"
                  },
                  "SEND_ANON_DATA": {
                    "Ref": "SendAnonymousData"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "BuildContactFlowIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BuildContactFlowLogGroup",
              "BuildContactFlowIamRole"
            ]
          },
          "KvsProcessRecordingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm-java.jar"
              },
              "Handler": "com.amazonaws.kvstream.KVSProcessRecordingLambda::handleRequest",
              "Runtime": "java8.al2",
              "FunctionName": "aws-connect-vm-prod-KvsProcessRecording",
              "MemorySize": 1024,
              "Timeout": 900,
              "Description": "Process recording via CTR\n",
              "Environment": {
                "Variables": {
                  "START_SELECTOR_TYPE": "FRAGMENT_NUMBER",
                  "TRANSCRIBE_REGION": {
                    "Ref": "AWS::Region"
                  },
                  "RECORDINGS_KEY_PREFIX": "recordings/",
                  "RECORDINGS_BUCKET_NAME": {
                    "Ref": "AudioRecordingsBucket"
                  },
                  "INPUT_KEY_PREFIX": "audio-file-input/",
                  "LOG_RECORDS_FLAG": "TRUE",
                  "RECORDINGS_PUBLIC_READ_ACL": "FALSE",
                  "APP_REGION": {
                    "Ref": "AWS::Region"
                  },
                  "CONTACT_VOICEMAIL_TABLE_NAME": {
                    "Ref": "ContactVoicemailTable"
                  },
                  "SOLUTION_ID": {
                    "Ref": "SolutionId"
                  },
                  "UUID": {
                    "Ref": "Uuid"
                  },
                  "SEND_ANON_DATA": {
                    "Ref": "SendAnonymousData"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "KvsProcessRecordingIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "KvsProcessRecordingLogGroup",
              "KvsProcessRecordingIamRole"
            ]
          },
          "ConnectSyncRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/sync-vm-connect.syncRequestHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-ConnectSyncRequest",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "SOLUTION_ID": {
                    "Ref": "SolutionId"
                  },
                  "UUID": {
                    "Ref": "Uuid"
                  },
                  "SEND_ANON_DATA": {
                    "Ref": "SendAnonymousData"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ConnectSyncRequestIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectSyncRequestLogGroup",
              "ConnectSyncRequestIamRole"
            ]
          },
          "ConnectSyncLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z/aws-connect-vm.zip"
              },
              "Handler": "handler/sync-vm-connect.syncHandler",
              "Runtime": "nodejs16.x",
              "FunctionName": "aws-connect-vm-prod-ConnectSync",
              "MemorySize": 1024,
              "Timeout": 900,
              "Environment": {
                "Variables": {
                  "USERS_TABLE_NAME": {
                    "Ref": "UsersTable"
                  },
                  "AMAZON_CONNECT_INSTANCE_ARN": {
                    "Ref": "AmazonConnectInstanceArn"
                  },
                  "SOLUTION_ID": {
                    "Ref": "SolutionId"
                  },
                  "UUID": {
                    "Ref": "Uuid"
                  },
                  "SEND_ANON_DATA": {
                    "Ref": "SendAnonymousData"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "ConnectSyncIamRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConnectSyncLogGroup",
              "ConnectSyncIamRole"
            ]
          },
          "ConnectSyncEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 0 * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ConnectSyncLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "ConnectSyncSchedule"
                }
              ]
            }
          },
          "ConnectSyncLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectSyncLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ConnectSyncEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-aws-connect-vm",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAgents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "agents",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAgentsAgentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAgents"
              },
              "PathPart": "{agentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAgentsSync": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAgents"
              },
              "PathPart": "sync",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGlobal": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "global",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGlobalSettings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGlobal"
              },
              "PathPart": "settings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContact": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contact",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContactFlow": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContact"
              },
              "PathPart": "flow",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAgentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAgentsAgentidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgentsAgentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGlobalSettingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGlobalSettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactFlowOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactFlow"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAgentsSyncOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgentsSync"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAgentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AgentsGetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAgentsAgentidVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgentsAgentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AgentsUpdateByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAgentsAgentidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgentsAgentidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AgentsGetByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodGlobalSettingsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGlobalSettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GlobalSettingsUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodGlobalSettingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGlobalSettings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GlobalSettingsGetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodContactFlowPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactFlow"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BuildContactFlowLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAgentsSyncPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAgentsSync"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConnectSyncRequestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizerApiGatewayAuthorizer"
            ]
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "Authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "IdentityValidationExpression": "Bearer (.*)",
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1679876317400": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodAgentsOptions",
              "ApiGatewayMethodAgentsAgentidVarOptions",
              "ApiGatewayMethodGlobalSettingsOptions",
              "ApiGatewayMethodContactFlowOptions",
              "ApiGatewayMethodAgentsSyncOptions",
              "ApiGatewayMethodAgentsGet",
              "ApiGatewayMethodAgentsAgentidVarPost",
              "ApiGatewayMethodAgentsAgentidVarGet",
              "ApiGatewayMethodGlobalSettingsPost",
              "ApiGatewayMethodGlobalSettingsGet",
              "ApiGatewayMethodContactFlowPost",
              "ApiGatewayMethodAgentsSyncPost"
            ]
          },
          "AgentsGetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgentsGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AgentsUpdateByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgentsUpdateByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AgentsGetByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgentsGetByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GlobalSettingsUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GlobalSettingsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GlobalSettingsGetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GlobalSettingsGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BuildContactFlowLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BuildContactFlowLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ConnectSyncRequestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectSyncRequestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ContactVoicemailStreamEventSourceMappingDynamodbContactVoicemailTable": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "ContactVoicemailStreamIamRole"
            ],
            "Properties": {
              "BatchSize": 10,
              "Enabled": true,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "ContactVoicemailTable",
                  "StreamArn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ContactVoicemailStreamLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "TRIM_HORIZON"
            }
          },
          "KvsProcessRecordingEventSourceMappingKinesisCTRStreamArn": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "KvsProcessRecordingIamRole"
            ],
            "Properties": {
              "BatchSize": 10,
              "Enabled": true,
              "EventSourceArn": {
                "Ref": "CTRStreamArn"
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "KvsProcessRecordingLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "TRIM_HORIZON",
              "MaximumBatchingWindowInSeconds": 1
            }
          },
          "TranscriptionEventsEventsRuleCloudWatchEvent1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventPattern": {
                "source": [
                  "aws.transcribe"
                ],
                "detail-type": [
                  "Transcribe Job State Change"
                ],
                "detail": {
                  "TranscriptionJobStatus": [
                    "COMPLETED",
                    "FAILED"
                  ]
                }
              },
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "TranscriptionEventsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "TranscriptionEventsCloudWatchEvent"
                }
              ]
            }
          },
          "TranscriptionEventsLambdaPermissionEventsRuleCloudWatchEvent1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TranscriptionEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "TranscriptionEventsEventsRuleCloudWatchEvent1",
                  "Arn"
                ]
              }
            }
          },
          "CognitoUserPoolUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UsernameAttributes": [
                "email"
              ],
              "Schema": [
                {
                  "AttributeDataType": "String",
                  "Mutable": true,
                  "Name": "roles"
                },
                {
                  "AttributeDataType": "String",
                  "Name": "email",
                  "Mutable": {
                    "Ref": "IsSamlInstance"
                  },
                  "Required": true
                }
              ],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": true
              },
              "UserPoolAddOns": {
                "AdvancedSecurityMode": "ENFORCED"
              }
            }
          },
          "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "Domain": {
                "Ref": "UserPoolDomainName"
              },
              "UserPoolId": {
                "Ref": "CognitoUserPoolUserPool"
              }
            }
          },
          "UserPoolAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPoolUserPool"
              }
            }
          },
          "UserPoolManagerGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "Manager",
              "UserPoolId": {
                "Ref": "CognitoUserPoolUserPool"
              }
            }
          },
          "AmazonConnectGetAgentLambdaRights": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAgentByExtensionLambdaFunction"
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "connect.amazonaws.com"
            }
          },
          "CognitoUsersConfig": {
            "Type": "Custom::CognitoUsersConfig",
            "DependsOn": [
              "CognitoUserPoolUserPool"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CognitoUsersConfigLambdaFunction",
                  "Arn"
                ]
              },
              "UUID": "bb13f6cf-a4bd-49f0-b214-24abebd03151",
              "AdminEmail": {
                "Ref": "AdminEmail"
              },
              "AdminFirstName": {
                "Ref": "AdminFirstName"
              },
              "AdminLastName": {
                "Ref": "AdminLastName"
              },
              "ManagerEmail": {
                "Ref": "ManagerEmail"
              },
              "ManagerFirstName": {
                "Ref": "ManagerFirstName"
              },
              "ManagerLastName": {
                "Ref": "ManagerLastName"
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "agentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "extension",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "agentId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "AgentExtensionIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "extension",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "SSESpecification": {
                "SSEEnabled": true
              }
            }
          },
          "GlobalTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "instanceArn",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "instanceArn",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "SSESpecification": {
                "SSEEnabled": true
              }
            }
          },
          "ContactVoicemailTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "contactId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "readerId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "assigneeId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "contactId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "readerId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "SSESpecification": {
                "SSEEnabled": true
              },
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "AssigneeIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "assigneeId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AudioRecordingsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccessControl": "LogDeliveryWrite",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "PUT",
                      "HEAD"
                    ],
                    "MaxAge": "3000"
                  }
                ]
              },
              "LoggingConfiguration": {
                "DestinationBucketName": {
                  "Ref": "VoicemailAccessLogBucket"
                },
                "LogFilePrefix": "audio-recording-bucket-logs"
              }
            }
          },
          "ApiAccessLogGroup": {
            "Type": "AWS::Logs::LogGroup"
          },
          "ApiGwIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "apigateway.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            }
          },
          "ApiGwAccountConfig": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
              "CloudWatchRoleArn": {
                "Fn::GetAtt": [
                  "ApiGwIamRole",
                  "Arn"
                ]
              }
            }
          },
          "ContactVoicemailStreamIamRole": {
            "DependsOn": [
              "VoicemailSecret"
            ],
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "ContactVoicemailStreamPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendRawEmail"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "NotResource": "arn:aws:sns:*:*:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "transcribe:GetTranscriptionJob"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:DescribeStream",
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ContactVoicemailTable",
                              "StreamArn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GlobalTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:DescribeUser"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "AmazonConnectInstanceArn"
                              },
                              "/agent/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:GetSignedUrl"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "AudioRecordingsBucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue"
                        ],
                        "Resource": {
                          "Ref": "VoicemailSecret"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "TranscriptionEventsIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "TranscriptionEventsPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "ContactVoicemailTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue"
                        ],
                        "Resource": {
                          "Ref": "VoicemailSecret"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GetAgentByExtensionIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GetAgentByExtensionPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "UsersTable",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:ListUsers",
                          "connect:DescribeUser"
                        ],
                        "Resource": [
                          {
                            "Ref": "AmazonConnectInstanceArn"
                          },
                          {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Ref": "AmazonConnectInstanceArn"
                                },
                                "/agent/*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CognitoUsersConfigIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CognitoUsersConfigPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cognito-idp:AdminCreateUser",
                          "cognito-idp:AdminDeleteUser",
                          "cognito-idp:AdminGetUser",
                          "cognito-idp:AdminAddUserToGroup"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "CognitoUserPoolUserPool",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GlobalTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AuthorizerIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "AuthorizerPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AgentsGetIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "AgentsGetPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AgentsUpdateByIdIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "AgentsUpdateByIdPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::GetAtt": [
                                    "UsersTable",
                                    "Arn"
                                  ]
                                },
                                "/index/*"
                              ]
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:DescribeUser"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "AmazonConnectInstanceArn"
                              },
                              "/agent/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "AgentsGetByIdIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "AgentsGetByIdPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:ListUsers",
                          "connect:DescribeUser"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "AmazonConnectInstanceArn"
                              },
                              "/agent/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GlobalSettingsUpdateIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GlobalSettingsUpdatePolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GlobalTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GlobalSettingsGetIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "GlobalSettingsGetPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GlobalTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "BuildContactFlowIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "BuildContactFlowPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:ListQueues"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "AmazonConnectInstanceArn"
                              },
                              "/queue/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "KvsProcessRecordingIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "KvsProcessRecordingPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "transcribe:GetTranscriptionJob",
                          "transcribe:StartTranscriptionJob"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kinesis:GetMedia",
                          "kinesis:GetRecords",
                          "kinesis:GetShardIterator",
                          "kinesis:DescribeStream",
                          "kinesis:ListStreams"
                        ],
                        "Resource": {
                          "Ref": "CTRStreamArn"
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "ContactVoicemailTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:PutObjectAcl"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "AudioRecordingsBucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kinesisvideo:GetMedia",
                          "kinesisvideo:GetDataEndpoint"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ConnectSyncRequestIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "ConnectSyncRequestPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:ListUsers"
                        ],
                        "Resource": {
                          "Ref": "AmazonConnectInstanceArn"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ConnectSyncIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "ConnectSyncPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan",
                          "dynamodb:BatchWriteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "connect:ListUsers"
                        ],
                        "Resource": {
                          "Ref": "AmazonConnectInstanceArn"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "VoicemailIamUser": {
            "DependsOn": [
              "VoicemailIamUserGroup"
            ],
            "Type": "AWS::IAM::User",
            "Properties": {
              "Groups": [
                {
                  "Ref": "VoicemailIamUserGroup"
                }
              ]
            }
          },
          "VoicemailIamUserGroup": {
            "Type": "AWS::IAM::Group",
            "Properties": {
              "Policies": [
                {
                  "PolicyName": "VoicemailIamPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:GetSignedUrl"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "AudioRecordingsBucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "VoicemailIamUserAccessKey": {
            "DependsOn": [
              "VoicemailIamUser"
            ],
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
              "UserName": {
                "Ref": "VoicemailIamUser"
              }
            }
          },
          "VoicemailSecret": {
            "DependsOn": [
              "VoicemailIamUser",
              "VoicemailIamUserAccessKey"
            ],
            "Type": "AWS::SecretsManager::Secret",
            "Properties": {
              "Description": "IAM Access Key Secret",
              "SecretString": {
                "Fn::Join": [
                  "",
                  [
                    "{\"accessKeyId\":",
                    "\"",
                    {
                      "Ref": "VoicemailIamUserAccessKey"
                    },
                    "\"",
                    ",\"secretAccessKey\":",
                    "\"",
                    {
                      "Fn::GetAtt": [
                        "VoicemailIamUserAccessKey",
                        "SecretAccessKey"
                      ]
                    },
                    "\"}"
                  ]
                ]
              }
            },
            "Metadata": {
              "cfn_nag": {
                "rules_to_suppress": [
                  {
                    "id": "W77",
                    "reason": "Uses the account's default AWS managed CMK for Secrets Manager·"
                  }
                ]
              }
            }
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "prod"
                }
              ]
            },
            "DependsOn": [
              "ApiGatewayDeployment1679876317400"
            ]
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": [
              "ApiGatewayDeployment1679876317400"
            ],
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "prod"
                }
              ],
              "Description": "Usage plan for aws-connect-vm prod stage",
              "Throttle": {
                "BurstLimit": 500,
                "RateLimit": 50
              }
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-connect-vm-prod-ServerlessDeploymentBucketName"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-connect-vm-prod-ServiceEndpoint"
            }
          },
          "ApiGatewayApiKey": {
            "Value": {
              "Fn::GetAtt": [
                "ApiGatewayApiKey1",
                "APIKeyId"
              ]
            }
          },
          "CognitoDomain": {
            "Value": {
              "Fn::Sub": "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
            }
          },
          "UserPoolId": {
            "Value": {
              "Ref": "CognitoUserPoolUserPool"
            }
          },
          "UserPoolArn": {
            "Value": {
              "Fn::GetAtt": [
                "CognitoUserPoolUserPool",
                "Arn"
              ]
            }
          }
        },
        "Parameters": {
          "AmazonConnectInstanceArn": {
            "Type": "String",
            "Default": "",
            "Description": "The ARN of your Amazon Connect Instance"
          },
          "CTRStreamArn": {
            "Description": "CTR Data Stream ARN",
            "Type": "String"
          },
          "DeliveryEmail": {
            "Description": "Transcription delivery email. Make sure this email is verified",
            "Default": "",
            "Type": "String"
          },
          "AvailableSMSCountries": {
            "Default": "us,ca",
            "Type": "String"
          },
          "AdminEmail": {
            "Default": "",
            "Type": "String"
          },
          "AdminFirstName": {
            "Default": "",
            "Type": "String"
          },
          "AdminLastName": {
            "Default": "",
            "Type": "String"
          },
          "ManagerEmail": {
            "Default": "",
            "Type": "String"
          },
          "ManagerFirstName": {
            "Default": "",
            "Type": "String"
          },
          "ManagerLastName": {
            "Default": "",
            "Type": "String"
          },
          "SignedRecordingUrlExpiration": {
            "Default": 900,
            "Type": "String"
          },
          "UserPoolDomainName": {
            "Default": "",
            "Type": "String"
          },
          "SolutionId": {
            "Default": "",
            "Type": "String"
          },
          "Uuid": {
            "Default": "",
            "Type": "String"
          },
          "VoicemailAccessLogBucket": {
            "Default": "VoicemailAccessLogBucket",
            "Type": "String"
          },
          "SendAnonymousData": {
            "Default": "",
            "Type": "String"
          },
          "IsSamlInstance": {
            "Default": false,
            "Type": "String",
            "AllowedValues": [
              true,
              false
            ]
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "config": {
        "AMAZON_CONNECT_INSTANCE_ARN": "",
        "DELIVERY_EMAIL": "",
        "ADMIN_EMAIL": "",
        "ADMIN_FIRST_NAME": "",
        "ADMIN_LAST_NAME": "",
        "MANAGER_EMAIL": "",
        "MANAGER_FIRST_NAME": "",
        "MANAGER_LAST_NAME": "",
        "AVAILABLE_SMS_COUNTRIES": "us,ca",
        "SIGNED_RECORDING_URL_EXP": 900
      },
      "authorizers": {
        "custom-roles": {
          "name": "Authorizer",
          "identitySource": "method.request.header.Authorization",
          "identityValidationExpression": "Bearer (.*)",
          "type": "TOKEN"
        }
      }
    },
    "plugins": [
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "ContactVoicemailStream": {
        "handler": "handler/voicemail.stream",
        "role": "ContactVoicemailStreamIamRole",
        "description": "AWS Lambda Function that will be triggered when records are written into the ContactVoicemail Table.\n",
        "events": [
          {
            "stream": {
              "type": "dynamodb",
              "arn": {
                "Fn::GetAtt": [
                  "ContactVoicemailTable",
                  "StreamArn"
                ]
              }
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "GLOBAL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GLOBAL_TABLE_NAME\"]"
          },
          "CONTACT_VOICEMAIL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"CONTACT_VOICEMAIL_TABLE_NAME\"]"
          },
          "SIGNED_RECORDING_URL_EXP": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SIGNED_RECORDING_URL_EXP\"]"
          },
          "DELIVERY_EMAIL": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DELIVERY_EMAIL\"]"
          },
          "AVAILABLE_SMS_COUNTRIES": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AVAILABLE_SMS_COUNTRIES\"]"
          },
          "SECRET_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ContactVoicemailStreamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SECRET_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-ContactVoicemailStream",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "TranscriptionEvents": {
        "handler": "handler/transcription.process",
        "role": "TranscriptionEventsIamRole",
        "description": "AWS Lambda Function that will be triggered when transcription status changes.\n",
        "events": [
          {
            "cloudwatchEvent": {
              "event": {
                "source": [
                  "aws.transcribe"
                ],
                "detail-type": [
                  "Transcribe Job State Change"
                ],
                "detail": {
                  "TranscriptionJobStatus": [
                    "COMPLETED",
                    "FAILED"
                  ]
                }
              }
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "GLOBAL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GLOBAL_TABLE_NAME\"]"
          },
          "CONTACT_VOICEMAIL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"CONTACT_VOICEMAIL_TABLE_NAME\"]"
          },
          "SIGNED_RECORDING_URL_EXP": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SIGNED_RECORDING_URL_EXP\"]"
          },
          "AVAILABLE_SMS_COUNTRIES": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AVAILABLE_SMS_COUNTRIES\"]"
          },
          "SECRET_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TranscriptionEventsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SECRET_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-TranscriptionEvents",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "GetAgentByExtension": {
        "description": "AWS Lambda Function that will be triggered when dialog flow needs to get agent's information based on phone extension\n",
        "handler": "handler/agents.getAgentByExtension",
        "role": "GetAgentByExtensionIamRole",
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAgentByExtensionLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAgentByExtensionLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "events": [],
        "name": "aws-connect-vm-prod-GetAgentByExtension",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "CognitoUsersConfig": {
        "handler": "handler/cognito.usersConfig",
        "role": "CognitoUsersConfigIamRole",
        "environment": {
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoUsersConfigLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "GLOBAL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoUsersConfigLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GLOBAL_TABLE_NAME\"]"
          },
          "AVAILABLE_SMS_COUNTRIES": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoUsersConfigLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AVAILABLE_SMS_COUNTRIES\"]"
          },
          "COGNITO_USER_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoUsersConfigLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"COGNITO_USER_POOL_ID\"]"
          },
          "DELIVERY_EMAIL": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CognitoUsersConfigLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DELIVERY_EMAIL\"]"
          }
        },
        "events": [],
        "name": "aws-connect-vm-prod-CognitoUsersConfig",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "Authorizer": {
        "handler": "handler/authorizer.handler",
        "role": "AuthorizerIamRole",
        "environment": {
          "COGNITO_USER_POOL_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"COGNITO_USER_POOL_ID\"]"
          },
          "APP_REGION": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_REGION\"]"
          }
        },
        "events": [],
        "name": "aws-connect-vm-prod-Authorizer",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "AgentsGet": {
        "handler": "handler/agents.getAgents",
        "role": "AgentsGetIamRole",
        "events": [
          {
            "http": {
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "agents",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsGetLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsGetLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-AgentsGet",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "AgentsUpdateById": {
        "handler": "handler/agents.updateAgentById",
        "role": "AgentsUpdateByIdIamRole",
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "agents/{agentId}",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsUpdateByIdLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsUpdateByIdLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-AgentsUpdateById",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "AgentsGetById": {
        "handler": "handler/agents.getAgentById",
        "role": "AgentsGetByIdIamRole",
        "events": [
          {
            "http": {
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "agents/{agentId}",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsGetByIdLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AgentsGetByIdLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-AgentsGetById",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "GlobalSettingsUpdate": {
        "handler": "handler/global-settings.update",
        "role": "GlobalSettingsUpdateIamRole",
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "global/settings",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "GLOBAL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsUpdateLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GLOBAL_TABLE_NAME\"]"
          },
          "AVAILABLE_SMS_COUNTRIES": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsUpdateLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AVAILABLE_SMS_COUNTRIES\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsUpdateLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-GlobalSettingsUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "GlobalSettingsGet": {
        "handler": "handler/global-settings.get",
        "role": "GlobalSettingsGetIamRole",
        "events": [
          {
            "http": {
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "global/settings",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "GLOBAL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsGetLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GLOBAL_TABLE_NAME\"]"
          },
          "AVAILABLE_SMS_COUNTRIES": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsGetLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AVAILABLE_SMS_COUNTRIES\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GlobalSettingsGetLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          }
        },
        "name": "aws-connect-vm-prod-GlobalSettingsGet",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "BuildContactFlow": {
        "handler": "handler/contact-flow.build",
        "role": "BuildContactFlowIamRole",
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "contact/flow",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "GET_AGENT_BY_EXTENSION_LAMBDA_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildContactFlowLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"GET_AGENT_BY_EXTENSION_LAMBDA_ARN\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildContactFlowLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "SOLUTION_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildContactFlowLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SOLUTION_ID\"]"
          },
          "UUID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildContactFlowLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"UUID\"]"
          },
          "SEND_ANON_DATA": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildContactFlowLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SEND_ANON_DATA\"]"
          }
        },
        "name": "aws-connect-vm-prod-BuildContactFlow",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "KvsProcessRecording": {
        "handler": "com.amazonaws.kvstream.KVSProcessRecordingLambda::handleRequest",
        "role": "KvsProcessRecordingIamRole",
        "timeout": 900,
        "runtime": "java8.al2",
        "package": {
          "individually": true,
          "artifact": "target/aws-connect-vm-java.jar"
        },
        "description": "Process recording via CTR\n",
        "events": [
          {
            "stream": {
              "type": "kinesis",
              "arn": {
                "Ref": "CTRStreamArn"
              },
              "batchWindow": 1
            }
          }
        ],
        "environment": {
          "START_SELECTOR_TYPE": "FRAGMENT_NUMBER",
          "TRANSCRIBE_REGION": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"TRANSCRIBE_REGION\"]"
          },
          "RECORDINGS_KEY_PREFIX": "recordings/",
          "RECORDINGS_BUCKET_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"RECORDINGS_BUCKET_NAME\"]"
          },
          "INPUT_KEY_PREFIX": "audio-file-input/",
          "LOG_RECORDS_FLAG": "TRUE",
          "RECORDINGS_PUBLIC_READ_ACL": "FALSE",
          "APP_REGION": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"APP_REGION\"]"
          },
          "CONTACT_VOICEMAIL_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"CONTACT_VOICEMAIL_TABLE_NAME\"]"
          },
          "SOLUTION_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SOLUTION_ID\"]"
          },
          "UUID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"UUID\"]"
          },
          "SEND_ANON_DATA": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KvsProcessRecordingLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SEND_ANON_DATA\"]"
          }
        },
        "name": "aws-connect-vm-prod-KvsProcessRecording",
        "memory": 1024,
        "vpc": {}
      },
      "ConnectSyncRequest": {
        "handler": "handler/sync-vm-connect.syncRequestHandler",
        "role": "ConnectSyncRequestIamRole",
        "timeout": 60,
        "events": [
          {
            "http": {
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "path": "agents/sync",
              "authorizer": {
                "type": "TOKEN",
                "name": "Authorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncRequestLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncRequestLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "SOLUTION_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncRequestLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SOLUTION_ID\"]"
          },
          "UUID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncRequestLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"UUID\"]"
          },
          "SEND_ANON_DATA": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncRequestLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SEND_ANON_DATA\"]"
          }
        },
        "name": "aws-connect-vm-prod-ConnectSyncRequest",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {}
      },
      "ConnectSync": {
        "handler": "handler/sync-vm-connect.syncHandler",
        "role": "ConnectSyncIamRole",
        "timeout": 900,
        "events": [
          {
            "schedule": "cron(0 0 * * ? *)"
          }
        ],
        "environment": {
          "USERS_TABLE_NAME": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"USERS_TABLE_NAME\"]"
          },
          "AMAZON_CONNECT_INSTANCE_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"AMAZON_CONNECT_INSTANCE_ARN\"]"
          },
          "SOLUTION_ID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SOLUTION_ID\"]"
          },
          "UUID": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"UUID\"]"
          },
          "SEND_ANON_DATA": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ConnectSyncLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"SEND_ANON_DATA\"]"
          }
        },
        "name": "aws-connect-vm-prod-ConnectSync",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {}
      }
    },
    "resources": {
      "Description": "Amazon Connect Voicemail Stack",
      "Parameters": {
        "AmazonConnectInstanceArn": {
          "Type": "String",
          "Default": "",
          "Description": "The ARN of your Amazon Connect Instance"
        },
        "CTRStreamArn": {
          "Description": "CTR Data Stream ARN",
          "Type": "String"
        },
        "DeliveryEmail": {
          "Description": "Transcription delivery email. Make sure this email is verified",
          "Default": "",
          "Type": "String"
        },
        "AvailableSMSCountries": {
          "Default": "us,ca",
          "Type": "String"
        },
        "AdminEmail": {
          "Default": "",
          "Type": "String"
        },
        "AdminFirstName": {
          "Default": "",
          "Type": "String"
        },
        "AdminLastName": {
          "Default": "",
          "Type": "String"
        },
        "ManagerEmail": {
          "Default": "",
          "Type": "String"
        },
        "ManagerFirstName": {
          "Default": "",
          "Type": "String"
        },
        "ManagerLastName": {
          "Default": "",
          "Type": "String"
        },
        "SignedRecordingUrlExpiration": {
          "Default": 900,
          "Type": "String"
        },
        "UserPoolDomainName": {
          "Default": "",
          "Type": "String"
        },
        "SolutionId": {
          "Default": "",
          "Type": "String"
        },
        "Uuid": {
          "Default": "",
          "Type": "String"
        },
        "VoicemailAccessLogBucket": {
          "Default": "VoicemailAccessLogBucket",
          "Type": "String"
        },
        "SendAnonymousData": {
          "Default": "",
          "Type": "String"
        },
        "IsSamlInstance": {
          "Default": false,
          "Type": "String",
          "AllowedValues": [
            true,
            false
          ]
        }
      },
      "Resources": {
        "CognitoUserPoolUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UsernameAttributes": [
              "email"
            ],
            "Schema": [
              {
                "AttributeDataType": "String",
                "Mutable": true,
                "Name": "roles"
              },
              {
                "AttributeDataType": "String",
                "Name": "email",
                "Mutable": {
                  "Ref": "IsSamlInstance"
                },
                "Required": true
              }
            ],
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": true
            },
            "UserPoolAddOns": {
              "AdvancedSecurityMode": "ENFORCED"
            }
          }
        },
        "UserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "Domain": {
              "Ref": "UserPoolDomainName"
            },
            "UserPoolId": {
              "Ref": "CognitoUserPoolUserPool"
            }
          }
        },
        "UserPoolAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "Admin",
            "UserPoolId": {
              "Ref": "CognitoUserPoolUserPool"
            }
          }
        },
        "UserPoolManagerGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "Manager",
            "UserPoolId": {
              "Ref": "CognitoUserPoolUserPool"
            }
          }
        },
        "AmazonConnectGetAgentLambdaRights": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAgentByExtensionLambdaFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "connect.amazonaws.com"
          }
        },
        "CognitoUsersConfig": {
          "Type": "Custom::CognitoUsersConfig",
          "DependsOn": [
            "CognitoUserPoolUserPool"
          ],
          "Properties": {
            "ServiceToken": {
              "Fn::GetAtt": [
                "CognitoUsersConfigLambdaFunction",
                "Arn"
              ]
            },
            "UUID": "bb13f6cf-a4bd-49f0-b214-24abebd03151",
            "AdminEmail": {
              "Ref": "AdminEmail"
            },
            "AdminFirstName": {
              "Ref": "AdminFirstName"
            },
            "AdminLastName": {
              "Ref": "AdminLastName"
            },
            "ManagerEmail": {
              "Ref": "ManagerEmail"
            },
            "ManagerFirstName": {
              "Ref": "ManagerFirstName"
            },
            "ManagerLastName": {
              "Ref": "ManagerLastName"
            }
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "agentId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "extension",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "agentId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "AgentExtensionIndex",
                "KeySchema": [
                  {
                    "AttributeName": "extension",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "SSESpecification": {
              "SSEEnabled": true
            }
          }
        },
        "GlobalTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "instanceArn",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "instanceArn",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "SSESpecification": {
              "SSEEnabled": true
            }
          }
        },
        "ContactVoicemailTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "contactId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "readerId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "assigneeId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "contactId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "readerId",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "SSESpecification": {
              "SSEEnabled": true
            },
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "AssigneeIdIndex",
                "KeySchema": [
                  {
                    "AttributeName": "assigneeId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "AudioRecordingsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "AccessControl": "LogDeliveryWrite",
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "PUT",
                    "HEAD"
                  ],
                  "MaxAge": "3000"
                }
              ]
            },
            "LoggingConfiguration": {
              "DestinationBucketName": {
                "Ref": "VoicemailAccessLogBucket"
              },
              "LogFilePrefix": "audio-recording-bucket-logs"
            }
          }
        },
        "ApiAccessLogGroup": {
          "Type": "AWS::Logs::LogGroup"
        },
        "ApiGwIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "apigateway.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
            ]
          }
        },
        "ApiGwAccountConfig": {
          "Type": "AWS::ApiGateway::Account",
          "Properties": {
            "CloudWatchRoleArn": {
              "Fn::GetAtt": [
                "ApiGwIamRole",
                "Arn"
              ]
            }
          }
        },
        "ContactVoicemailStreamIamRole": {
          "DependsOn": [
            "VoicemailSecret"
          ],
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "ContactVoicemailStreamPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendRawEmail"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sns:Publish"
                      ],
                      "NotResource": "arn:aws:sns:*:*:*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "transcribe:GetTranscriptionJob"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:DescribeStream",
                        "dynamodb:GetRecords",
                        "dynamodb:GetShardIterator",
                        "dynamodb:ListStreams"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "ContactVoicemailTable",
                            "StreamArn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GlobalTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:DescribeUser"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Ref": "AmazonConnectInstanceArn"
                            },
                            "/agent/*"
                          ]
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:GetSignedUrl"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "AudioRecordingsBucket",
                                "Arn"
                              ]
                            },
                            "/*"
                          ]
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue"
                      ],
                      "Resource": {
                        "Ref": "VoicemailSecret"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "TranscriptionEventsIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "TranscriptionEventsPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ContactVoicemailTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue"
                      ],
                      "Resource": {
                        "Ref": "VoicemailSecret"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "GetAgentByExtensionIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "GetAgentByExtensionPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "UsersTable",
                                "Arn"
                              ]
                            },
                            "/index/*"
                          ]
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:ListUsers",
                        "connect:DescribeUser"
                      ],
                      "Resource": [
                        {
                          "Ref": "AmazonConnectInstanceArn"
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "AmazonConnectInstanceArn"
                              },
                              "/agent/*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "CognitoUsersConfigIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CognitoUsersConfigPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cognito-idp:AdminCreateUser",
                        "cognito-idp:AdminDeleteUser",
                        "cognito-idp:AdminGetUser",
                        "cognito-idp:AdminAddUserToGroup"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "CognitoUserPoolUserPool",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GlobalTable",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "AuthorizerIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "AuthorizerPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "AgentsGetIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "AgentsGetPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "AgentsUpdateByIdIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "AgentsUpdateByIdPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "UsersTable",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:DescribeUser"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Ref": "AmazonConnectInstanceArn"
                            },
                            "/agent/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "AgentsGetByIdIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "AgentsGetByIdPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:ListUsers",
                        "connect:DescribeUser"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Ref": "AmazonConnectInstanceArn"
                            },
                            "/agent/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "GlobalSettingsUpdateIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "GlobalSettingsUpdatePolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GlobalTable",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "GlobalSettingsGetIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "GlobalSettingsGetPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GlobalTable",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "BuildContactFlowIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "BuildContactFlowPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:ListQueues"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Ref": "AmazonConnectInstanceArn"
                            },
                            "/queue/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "KvsProcessRecordingIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "KvsProcessRecordingPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "transcribe:GetTranscriptionJob",
                        "transcribe:StartTranscriptionJob"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "kinesis:GetMedia",
                        "kinesis:GetRecords",
                        "kinesis:GetShardIterator",
                        "kinesis:DescribeStream",
                        "kinesis:ListStreams"
                      ],
                      "Resource": {
                        "Ref": "CTRStreamArn"
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ContactVoicemailTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:PutObjectAcl"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "AudioRecordingsBucket",
                                "Arn"
                              ]
                            },
                            "/*"
                          ]
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "kinesisvideo:GetMedia",
                        "kinesisvideo:GetDataEndpoint"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "ConnectSyncRequestIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "ConnectSyncRequestPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan",
                        "dynamodb:BatchWriteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:ListUsers"
                      ],
                      "Resource": {
                        "Ref": "AmazonConnectInstanceArn"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "ConnectSyncIamRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "ConnectSyncPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan",
                        "dynamodb:BatchWriteItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "connect:ListUsers"
                      ],
                      "Resource": {
                        "Ref": "AmazonConnectInstanceArn"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "VoicemailIamUser": {
          "DependsOn": [
            "VoicemailIamUserGroup"
          ],
          "Type": "AWS::IAM::User",
          "Properties": {
            "Groups": [
              {
                "Ref": "VoicemailIamUserGroup"
              }
            ]
          }
        },
        "VoicemailIamUserGroup": {
          "Type": "AWS::IAM::Group",
          "Properties": {
            "Policies": [
              {
                "PolicyName": "VoicemailIamPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:GetSignedUrl"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "AudioRecordingsBucket",
                                "Arn"
                              ]
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "VoicemailIamUserAccessKey": {
          "DependsOn": [
            "VoicemailIamUser"
          ],
          "Type": "AWS::IAM::AccessKey",
          "Properties": {
            "UserName": {
              "Ref": "VoicemailIamUser"
            }
          }
        },
        "VoicemailSecret": {
          "DependsOn": [
            "VoicemailIamUser",
            "VoicemailIamUserAccessKey"
          ],
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Description": "IAM Access Key Secret",
            "SecretString": {
              "Fn::Join": [
                "",
                [
                  "{\"accessKeyId\":",
                  "\"",
                  {
                    "Ref": "VoicemailIamUserAccessKey"
                  },
                  "\"",
                  ",\"secretAccessKey\":",
                  "\"",
                  {
                    "Fn::GetAtt": [
                      "VoicemailIamUserAccessKey",
                      "SecretAccessKey"
                    ]
                  },
                  "\"}"
                ]
              ]
            }
          },
          "Metadata": {
            "cfn_nag": {
              "rules_to_suppress": [
                {
                  "id": "W77",
                  "reason": "Uses the account's default AWS managed CMK for Secrets Manager·"
                }
              ]
            }
          }
        },
        "ApiGatewayApiKey1": {
          "Type": "AWS::ApiGateway::ApiKey",
          "Properties": {
            "Enabled": true,
            "StageKeys": [
              {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "prod"
              }
            ]
          },
          "DependsOn": [
            "ApiGatewayDeployment1679876317400"
          ]
        },
        "ApiGatewayUsagePlan": {
          "Type": "AWS::ApiGateway::UsagePlan",
          "DependsOn": [
            "ApiGatewayDeployment1679876317400"
          ],
          "Properties": {
            "ApiStages": [
              {
                "ApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Stage": "prod"
              }
            ],
            "Description": "Usage plan for aws-connect-vm prod stage",
            "Throttle": {
              "BurstLimit": 500,
              "RateLimit": 50
            }
          }
        },
        "ApiGatewayUsagePlanKey1": {
          "Type": "AWS::ApiGateway::UsagePlanKey",
          "Properties": {
            "KeyId": {
              "Ref": "ApiGatewayApiKey1"
            },
            "KeyType": "API_KEY",
            "UsagePlanId": {
              "Ref": "ApiGatewayUsagePlan"
            }
          }
        }
      },
      "Outputs": {
        "ApiGatewayApiKey": {
          "Value": {
            "Fn::GetAtt": [
              "ApiGatewayApiKey1",
              "APIKeyId"
            ]
          }
        },
        "CognitoDomain": {
          "Value": {
            "Fn::Sub": "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          }
        },
        "UserPoolId": {
          "Value": {
            "Ref": "CognitoUserPoolUserPool"
          }
        },
        "UserPoolArn": {
          "Value": {
            "Fn::GetAtt": [
              "CognitoUserPoolUserPool",
              "Arn"
            ]
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "aws-connect-vm",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "exclude": [
          "target/**",
          "src/**",
          "tests/**",
          "tools/**",
          "mock/**",
          "env/**"
        ],
        "artifactsS3KeyDirname": "serverless/aws-connect-vm/prod/code-artifacts",
        "artifact": "/home/ec2-user/environment/aws-connect-voicemail/source/aws-connect-vm-serverless/.serverless/aws-connect-vm.zip",
        "artifactDirectoryName": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/ec2-user/environment/aws-connect-voicemail/source/aws-connect-vm-serverless/.serverless/aws-connect-vm.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-connect-vm/prod/1679876366597-2023-03-27T00:19:26.597Z",
    "artifact": "aws-connect-vm.zip"
  }
}