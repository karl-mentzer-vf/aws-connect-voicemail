{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, isModelConstructor, traverseModel, validatePredicate, isPrivateMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {}\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n  IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.initPromise];\n          case 3:\n            _b.sent();\n            _b.label = 4;\n          case 4:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            if (!!this.db) return [3 /*break*/, 7];\n            _a = this;\n            return [4 /*yield*/, idb.openDB(DB_NAME, 1, {\n              upgrade: function upgrade(db, _oldVersion, _newVersion, _txn) {\n                var keyPath = 'id';\n                Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                  var namespace = theSchema.namespaces[namespaceName];\n                  Object.keys(namespace.models).forEach(function (modelName) {\n                    var indexes = _this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n                    var storeName = _this.getStorename(namespaceName, modelName);\n                    var store = db.createObjectStore(storeName, {\n                      keyPath: keyPath\n                    });\n                    indexes.forEach(function (index) {\n                      return store.createIndex(index, index);\n                    });\n                  });\n                });\n              }\n            })];\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, opType, e_1_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = _this.getStorename(namespaceName, modelName);\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            tx = this.db.transaction(__spreadArrays([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4 /*yield*/, store.get(model.id)];\n          case 2:\n            fromDB = _b.sent();\n            if (condition) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 12, 13, 18]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 11];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            store_1 = tx.objectStore(storeName_1);\n            id = item.id;\n            return [4 /*yield*/, store_1.get(id)];\n          case 6:\n            opType = _b.sent() === undefined ? OpType.INSERT : OpType.UPDATE;\n            if (!(id === model.id)) return [3 /*break*/, 8];\n            return [4 /*yield*/, store_1.put(item)];\n          case 7:\n            _b.sent();\n            result.push([instance, opType]);\n            return [3 /*break*/, 10];\n          case 8:\n            if (!(opType === OpType.INSERT)) return [3 /*break*/, 10];\n            return [4 /*yield*/, store_1.put(item)];\n          case 9:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 10;\n          case 10:\n            return [3 /*break*/, 4];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _b.trys.push([13,, 16, 17]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 14:\n            _b.sent();\n            _b.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [4 /*yield*/, tx.done];\n          case 19:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_2, _a, e_3, _b, e_4, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, connectionRecord, e_3_1, recordItem, connectionRecord, e_4_1, e_2_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readonly');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n            storeName = this.getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 17];\n              case 'HAS_MANY':\n                return [3 /*break*/, 30];\n            }\n            return [3 /*break*/, 31];\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 9];\n            recordItem = records_1_1.value;\n            if (!recordItem[fieldName]) return [3 /*break*/, 8];\n            return [4 /*yield*/, store.get(recordItem[fieldName])];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n          case 8:\n            return [3 /*break*/, 5];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 12:\n            _e.sent();\n            _e.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [3 /*break*/, 32];\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n          case 18:\n            return [4 /*yield*/, records_2.next()];\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3 /*break*/, 21];\n            return [4 /*yield*/, store.get(recordItem[targetName])];\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n          case 21:\n            return [3 /*break*/, 18];\n          case 22:\n            return [3 /*break*/, 29];\n          case 23:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 29];\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 26];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 25:\n            _e.sent();\n            _e.label = 26;\n          case 26:\n            return [3 /*break*/, 28];\n          case 27:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 28:\n            return [7 /*endfinally*/];\n          case 29:\n            return [3 /*break*/, 32];\n          case 30:\n            // TODO: Lazy loading\n            return [3 /*break*/, 32];\n          case 31:\n            exhaustiveCheck(relation.relationType);\n            return [3 /*break*/, 32];\n          case 32:\n            return [3 /*break*/, 2];\n          case 33:\n            return [3 /*break*/, 40];\n          case 34:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 40];\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 37];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 36:\n            _e.sent();\n            _e.label = 37;\n          case 37:\n            return [3 /*break*/, 39];\n          case 38:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 39:\n            return [7 /*endfinally*/];\n          case 40:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, predicateObjs_1, type_1, idPredicate, id, record, x, all, filtered, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _c.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            if (!predicate) return [3 /*break*/, 8];\n            predicates = ModelPredicateCreator.getPredicates(predicate);\n            if (!predicates) return [3 /*break*/, 8];\n            predicateObjs_1 = predicates.predicates, type_1 = predicates.type;\n            idPredicate = predicateObjs_1.length === 1 && predicateObjs_1.find(function (p) {\n              return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n            });\n            if (!idPredicate) return [3 /*break*/, 5];\n            id = idPredicate.operand;\n            return [4 /*yield*/, this.db.get(storeName, id)];\n          case 2:\n            record = _c.sent();\n            if (!record) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, [record])];\n          case 3:\n            x = _c.sent()[0];\n            return [2 /*return*/, [x]];\n          case 4:\n            return [2 /*return*/, []];\n          case 5:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 6:\n            all = _c.sent();\n            filtered = predicateObjs_1 ? all.filter(function (m) {\n              return validatePredicate(m, type_1, predicateObjs_1);\n            }) : all;\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, this.inMemoryPagination(filtered, pagination))];\n          case 7:\n            return [2 /*return*/, _c.sent()];\n          case 8:\n            _a = this.load;\n            _b = [namespaceName, modelConstructor.name];\n            return [4 /*yield*/, this.enginePagination(storeName, pagination)];\n          case 9:\n            return [4 /*yield*/, _a.apply(this, _b.concat([_c.sent()]))];\n          case 10:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination) {\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit, moreRecords, itemsLeft;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            moreRecords = true;\n            itemsLeft = limit;\n            _c.label = 4;\n          case 4:\n            if (!(moreRecords && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            if (hasLimit) {\n              itemsLeft--;\n              moreRecords = itemsLeft > 0 && cursor !== null;\n            } else {\n              moreRecords = cursor !== null;\n            }\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _a.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4 /*yield*/, store.get(model.id)];\n          case 10:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 12:\n            _a.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 14:\n            _a.sent();\n            _a.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_5, _a, e_6, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, e_6_1, e_5_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 20, 21, 26]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 19];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 12, 13, 18]);\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 11];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 10];\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            return [4 /*yield*/, store.delete(item['id'])];\n          case 7:\n            _c.sent();\n            _c.label = 8;\n          case 8:\n            return [4 /*yield*/, store.delete(item.toString())];\n          case 9:\n            _c.sent();\n            _c.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _c.trys.push([13,, 16, 17]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 14:\n            _c.sent();\n            _c.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 2];\n          case 19:\n            return [3 /*break*/, 26];\n          case 20:\n            e_5_1 = _c.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 26];\n          case 21:\n            _c.trys.push([21,, 24, 25]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 23];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 22:\n            _c.sent();\n            _c.label = 23;\n          case 23:\n            return [3 /*break*/, 25];\n          case 24:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 25:\n            return [7 /*endfinally*/];\n          case 26:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_7, _a, e_8, _b, e_9, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, fieldName, modelName, storeName, _d, model, index_1, recordToDelete, e_8_1, index, model, childrenArray, e_9_1, e_7_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 36, 37, 42]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 35];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName;\n            storeName = this.getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 17];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 32];\n            }\n            return [3 /*break*/, 33];\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 9];\n            model = models_1_1.value;\n            index_1 = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index_1).get(model.id)];\n          case 6:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            _e.label = 8;\n          case 8:\n            return [3 /*break*/, 4];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 12:\n            _e.sent();\n            _e.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [3 /*break*/, 34];\n          case 17:\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n            _e.label = 18;\n          case 18:\n            _e.trys.push([18, 25, 26, 31]);\n            models_2 = __asyncValues(models);\n            _e.label = 19;\n          case 19:\n            return [4 /*yield*/, models_2.next()];\n          case 20:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 24];\n            model = models_2_1.value;\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(model['id'])];\n          case 21:\n            childrenArray = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 22:\n            _e.sent();\n            _e.label = 23;\n          case 23:\n            return [3 /*break*/, 19];\n          case 24:\n            return [3 /*break*/, 31];\n          case 25:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 31];\n          case 26:\n            _e.trys.push([26,, 29, 30]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 28];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 27:\n            _e.sent();\n            _e.label = 28;\n          case 28:\n            return [3 /*break*/, 30];\n          case 29:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 30:\n            return [7 /*endfinally*/];\n          case 31:\n            return [3 /*break*/, 34];\n          case 32:\n            // Intentionally blank\n            return [3 /*break*/, 34];\n          case 33:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 34];\n          case 34:\n            return [3 /*break*/, 1];\n          case 35:\n            return [3 /*break*/, 42];\n          case 36:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 42];\n          case 37:\n            _e.trys.push([37,, 40, 41]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 39];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 38:\n            _e.sent();\n            _e.label = 39;\n          case 39:\n            return [3 /*break*/, 41];\n          case 40:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 41:\n            return [7 /*endfinally*/];\n          case 42:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            this.db.close();\n            return [4 /*yield*/, idb.deleteDB(DB_NAME)];\n          case 2:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":null,"metadata":{},"sourceType":"module"}