{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              };\n              // Create a new recorder\n              var tmpPredicateRecorder = new Proxy({}, handler);\n              // Set the recorder group\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n              // Apply the predicates to the recorder (this is the step that records the changes)\n              newPredicate(tmpPredicateRecorder);\n              // Push the group to the top-level recorder\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n            return result_1;\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":null,"metadata":{},"sourceType":"module"}