{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */function () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n    this._startLoop();\n  }\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n    if (this._buffer > this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n    this._buffer.push(bufferElement);\n  };\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n    if (this._pause || !bufferLength) {\n      return;\n    }\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n    var bufferSubset = this._buffer.splice(0, batchSize);\n    this._putEvents(bufferSubset);\n  };\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._client.putEvents(batchEventParams).promise()];\n          case 2:\n            data = _a.sent();\n            this._processPutEventsSuccessResponse(data, eventMap);\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n      var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n      var appId = config.appId,\n        endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed:', err);\n    var statusCode = err.statusCode;\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n      this._retry(retryableEvents);\n      return;\n    }\n  };\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var endpointId = _a[0],\n        endpointValues = _a[1];\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n        var eventId = _a[0],\n          _d = _a[1],\n          StatusCode = _d.StatusCode,\n          Message = _d.Message;\n        var eventObject = eventMap[eventId];\n        // manually crafting handlers response to keep API consistant\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a;\n    // retryable events that haven't reached the resendLimit\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n      var params = event.params;\n      var _b = params.event,\n        eventId = _b.eventId,\n        name = _b.name;\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    });\n    // add the events to the front of the buffer\n    (_a = this._buffer).unshift.apply(_a, eligibleEvents);\n  };\n  // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = Object.entries(curVal)[0],\n        key = _a[0],\n        value = _a[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n  return EventsBuffer;\n}();\nexport default EventsBuffer;","map":null,"metadata":{},"sourceType":"module"}