{"ast":null,"code":"'use strict';\n\nvar core = require('../'),\n  isArray = require('lodash/isArray'),\n  isFunction = require('lodash/isFunction'),\n  isObjectLike = require('lodash/isObjectLike');\nmodule.exports = function (options) {\n  var errorText = 'Please verify options'; // For better minification because this string is repeating\n\n  if (!isObjectLike(options)) {\n    throw new TypeError(errorText);\n  }\n  if (!isFunction(options.request)) {\n    throw new TypeError(errorText + '.request');\n  }\n  if (!isArray(options.expose) || options.expose.length === 0) {\n    throw new TypeError(errorText + '.expose');\n  }\n  var plumbing = core({\n    PromiseImpl: options.PromiseImpl,\n    constructorMixin: options.constructorMixin\n  });\n\n  // Intercepting Request's init method\n\n  var originalInit = options.request.Request.prototype.init;\n  options.request.Request.prototype.init = function RP$initInterceptor(requestOptions) {\n    // Init may be called again - currently in case of redirects\n    if (isObjectLike(requestOptions) && !this._callback && !this._rp_promise) {\n      plumbing.init.call(this, requestOptions);\n    }\n    return originalInit.apply(this, arguments);\n  };\n\n  // Exposing the Promise capabilities\n\n  var thenExposed = false;\n  for (var i = 0; i < options.expose.length; i += 1) {\n    var method = options.expose[i];\n    plumbing[method === 'promise' ? 'exposePromise' : 'exposePromiseMethod'](options.request.Request.prototype, null, '_rp_promise', method);\n    if (method === 'then') {\n      thenExposed = true;\n    }\n  }\n  if (!thenExposed) {\n    throw new Error('Please expose \"then\"');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}