{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport API from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { buildGraphQLOperation } from '../utils';\nimport { jitteredExponentialRetry } from '@aws-amplify/core';\nvar DEFAULT_PAGINATION_LIMIT = 100;\nvar DEFAULT_MAX_RECORDS_TO_SYNC = 10000;\nvar SyncProcessor = /** @class */function () {\n  function SyncProcessor(schema, maxRecordsToSync, syncPageSize) {\n    if (maxRecordsToSync === void 0) {\n      maxRecordsToSync = DEFAULT_MAX_RECORDS_TO_SYNC;\n    }\n    if (syncPageSize === void 0) {\n      syncPageSize = DEFAULT_PAGINATION_LIMIT;\n    }\n    this.schema = schema;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.typeQuery = new WeakMap();\n    this.generateQueries();\n  }\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = buildGraphQLOperation(namespace, model, 'LIST')[0],\n          opNameQuery = _a.slice(1);\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit) {\n    if (limit === void 0) {\n      limit = null;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, data, _b, opResult, items, newNextToken, startedAt;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = this.typeQuery.get(modelDefinition), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync\n            };\n            return [4 /*yield*/, this.jitteredRetry(query, variables)];\n          case 1:\n            data = _c.sent().data;\n            _b = opName, opResult = data[_b];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2 /*return*/, {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.jitteredRetry = function (query, variables) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, API.graphql({\n                        query: query,\n                        variables: variables\n                      })];\n                    case 1:\n                      return [2 /*return*/, _a.sent()];\n                  }\n                });\n              });\n            }, [query, variables])];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n    var processing = true;\n    var maxRecordsToSync = this.maxRecordsToSync !== undefined ? this.maxRecordsToSync : DEFAULT_MAX_RECORDS_TO_SYNC;\n    var syncPageSize = this.syncPageSize !== undefined ? this.syncPageSize : DEFAULT_PAGINATION_LIMIT;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        for (var _i = 0, _a = Array.from(namespace.modelTopologicalOrdering.keys()); _i < _a.length; _i++) {\n          var modelName = _a[_i];\n          var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n          map.set(namespace.models[modelName], typeLastSync);\n        }\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var syncable = _a[0].syncable;\n        return syncable;\n      }).map(function (_a) {\n        var modelDefinition = _a[0],\n          _b = _a[1],\n          namespace = _b[0],\n          lastSync = _b[1];\n        return __awaiter(_this, void 0, void 0, function () {\n          var done, nextToken, startedAt, items, recordsReceived, parents, promises, promise;\n          var _this = this;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                done = false;\n                nextToken = null;\n                startedAt = null;\n                items = null;\n                recordsReceived = 0;\n                parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                promises = parents.map(function (parent) {\n                  return parentPromises.get(namespace + \"_\" + parent);\n                });\n                promise = new Promise(function (res) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var limit;\n                    var _a;\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          return [4 /*yield*/, Promise.all(promises)];\n                        case 1:\n                          _b.sent();\n                          _b.label = 2;\n                        case 2:\n                          if (!processing) {\n                            return [2 /*return*/];\n                          }\n\n                          limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                          return [4 /*yield*/, this.retrievePage(modelDefinition, lastSync, nextToken, limit)];\n                        case 3:\n                          _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                          recordsReceived += items.length;\n                          done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                          observer.next({\n                            namespace: namespace,\n                            modelDefinition: modelDefinition,\n                            items: items,\n                            done: done,\n                            startedAt: startedAt,\n                            isFullSync: !lastSync\n                          });\n                          _b.label = 4;\n                        case 4:\n                          if (!done) return [3 /*break*/, 2];\n                          _b.label = 5;\n                        case 5:\n                          res();\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                });\n\n                parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                return [4 /*yield*/, promise];\n              case 1:\n                _c.sent();\n                return [2 /*return*/];\n            }\n          });\n        });\n      });\n\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n      return function () {\n        processing = false;\n      };\n    });\n    return observable;\n  };\n  return SyncProcessor;\n}();\nexport { SyncProcessor };","map":null,"metadata":{},"sourceType":"module"}