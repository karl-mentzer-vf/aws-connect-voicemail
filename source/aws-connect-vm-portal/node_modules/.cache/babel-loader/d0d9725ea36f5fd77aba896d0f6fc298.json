{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ModelPredicateCreator } from '../predicates';\nimport { QueryOne } from '../types';\nimport { SYNC } from '../util';\nimport { TransformerMutationType } from './utils';\n// TODO: Persist deleted ids\nvar MutationEventOutbox = /** @class */function () {\n  function MutationEventOutbox(schema, namespaceResolver, MutationEvent, ownSymbol) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.MutationEvent = MutationEvent;\n    this.ownSymbol = ownSymbol;\n  }\n  MutationEventOutbox.prototype.enqueue = function (storage, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, predicate, first, incomingMutationType, incomingConditionJSON, incomingCondition;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n            predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', mutationEvent.modelId).id('ne', _this.inProgressMutationEventId);\n            });\n            return [4 /*yield*/, storage.query(this.MutationEvent, predicate)];\n          case 1:\n            first = _a.sent()[0];\n            if (!(first === undefined)) return [3 /*break*/, 3];\n            return [4 /*yield*/, storage.save(mutationEvent, undefined, this.ownSymbol)];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n          case 3:\n            incomingMutationType = mutationEvent.operation;\n            if (!(first.operation === TransformerMutationType.CREATE)) return [3 /*break*/, 8];\n            if (!(incomingMutationType === TransformerMutationType.DELETE)) return [3 /*break*/, 5];\n            // delete all for model\n            return [4 /*yield*/, storage.delete(this.MutationEvent, predicate)];\n          case 4:\n            // delete all for model\n            _a.sent();\n            return [3 /*break*/, 7];\n          case 5:\n            // first gets updated with incoming's data, condition intentionally skiped\n            return [4 /*yield*/, storage.save(this.MutationEvent.copyOf(first, function (draft) {\n              draft.data = mutationEvent.data;\n            }), undefined, this.ownSymbol)];\n          case 6:\n            // first gets updated with incoming's data, condition intentionally skiped\n            _a.sent();\n            _a.label = 7;\n          case 7:\n            return [3 /*break*/, 12];\n          case 8:\n            incomingConditionJSON = mutationEvent.condition;\n            incomingCondition = JSON.parse(incomingConditionJSON);\n            if (!(Object.keys(incomingCondition).length === 0)) return [3 /*break*/, 10];\n            // delete all for model\n            return [4 /*yield*/, storage.delete(this.MutationEvent, predicate)];\n          case 9:\n            // delete all for model\n            _a.sent();\n            _a.label = 10;\n          case 10:\n            // Enqueue new one\n            return [4 /*yield*/, storage.save(mutationEvent, undefined, this.ownSymbol)];\n          case 11:\n            // Enqueue new one\n            _a.sent();\n            _a.label = 12;\n          case 12:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.dequeue = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.peek(storage)];\n          case 1:\n            head = _a.sent();\n            return [4 /*yield*/, storage.delete(head)];\n          case 2:\n            _a.sent();\n            this.inProgressMutationEventId = undefined;\n            return [2 /*return*/, head];\n        }\n      });\n    });\n  };\n  /**\n   * Doing a peek() implies that the mutation goes \"inProgress\"\n   *\n   * @param storage\n   */\n  MutationEventOutbox.prototype.peek = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, storage.queryOne(this.MutationEvent, QueryOne.FIRST)];\n          case 1:\n            head = _a.sent();\n            this.inProgressMutationEventId = head ? head.id : undefined;\n            return [2 /*return*/, head];\n        }\n      });\n    });\n  };\n  MutationEventOutbox.prototype.getForModel = function (storage, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, mutationEvents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models.MutationEvent;\n            return [4 /*yield*/, storage.query(this.MutationEvent, ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', model.id);\n            }))];\n          case 1:\n            mutationEvents = _a.sent();\n            return [2 /*return*/, mutationEvents];\n        }\n      });\n    });\n  };\n  return MutationEventOutbox;\n}();\nexport { MutationEventOutbox };","map":null,"metadata":{},"sourceType":"module"}