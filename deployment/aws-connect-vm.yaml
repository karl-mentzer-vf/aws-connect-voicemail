{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Description": "Amazon Connect Voicemail Stack", 
  "Resources": {
    "ContactVoicemailStreamLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/voicemail.stream", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Description": "AWS Lambda Function that will be triggered when records are written into the ContactVoicemail Table.\n", 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "GLOBAL_TABLE_NAME": {
              "Ref": "GlobalTable"
            }, 
            "CONTACT_VOICEMAIL_TABLE_NAME": {
              "Ref": "ContactVoicemailTable"
            }, 
            "SIGNED_RECORDING_URL_EXP": {
              "Ref": "SignedRecordingUrlExpiration"
            }, 
            "DELIVERY_EMAIL": {
              "Ref": "DeliveryEmail"
            }, 
            "AVAILABLE_SMS_COUNTRIES": {
              "Ref": "AvailableSMSCountries"
            }, 
            "SECRET_ARN": {
              "Ref": "VoicemailSecret"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "ContactVoicemailStreamIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "ContactVoicemailStreamIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "TranscriptionEventsLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/transcription.process", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Description": "AWS Lambda Function that will be triggered when transcription status changes.\n", 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "GLOBAL_TABLE_NAME": {
              "Ref": "GlobalTable"
            }, 
            "CONTACT_VOICEMAIL_TABLE_NAME": {
              "Ref": "ContactVoicemailTable"
            }, 
            "SIGNED_RECORDING_URL_EXP": {
              "Ref": "SignedRecordingUrlExpiration"
            }, 
            "AVAILABLE_SMS_COUNTRIES": {
              "Ref": "AvailableSMSCountries"
            }, 
            "SECRET_ARN": {
              "Ref": "VoicemailSecret"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "TranscriptionEventsIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "TranscriptionEventsIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "GetAgentByExtensionLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/agents.getAgentByExtension", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Description": "AWS Lambda Function that will be triggered when dialog flow needs to get agent's information based on phone extension\n", 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "GetAgentByExtensionIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "GetAgentByExtensionIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "CognitoUsersConfigLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/cognito.usersConfig", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "GLOBAL_TABLE_NAME": {
              "Ref": "GlobalTable"
            }, 
            "AVAILABLE_SMS_COUNTRIES": {
              "Ref": "AvailableSMSCountries"
            }, 
            "COGNITO_USER_POOL_ID": {
              "Ref": "CognitoUserPoolUserPool"
            }, 
            "DELIVERY_EMAIL": {
              "Ref": "DeliveryEmail"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "CognitoUsersConfigIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "CognitoUsersConfigIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "AuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/authorizer.handler", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "COGNITO_USER_POOL_ID": {
              "Ref": "CognitoUserPoolUserPool"
            }, 
            "APP_REGION": {
              "Ref": "AWS::Region"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "AuthorizerIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "AuthorizerIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "AgentsGetLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/agents.getAgents", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "AgentsGetIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "AgentsGetIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "AgentsUpdateByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/agents.updateAgentById", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "AgentsUpdateByIdIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "AgentsUpdateByIdIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "AgentsGetByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/agents.getAgentById", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "AgentsGetByIdIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "AgentsGetByIdIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "GlobalSettingsUpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/global-settings.update", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "GLOBAL_TABLE_NAME": {
              "Ref": "GlobalTable"
            }, 
            "AVAILABLE_SMS_COUNTRIES": {
              "Ref": "AvailableSMSCountries"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "GlobalSettingsUpdateIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "GlobalSettingsUpdateIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "GlobalSettingsGetLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/global-settings.get", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "GLOBAL_TABLE_NAME": {
              "Ref": "GlobalTable"
            }, 
            "AVAILABLE_SMS_COUNTRIES": {
              "Ref": "AvailableSMSCountries"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "GlobalSettingsGetIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "GlobalSettingsGetIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "BuildContactFlowLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/contact-flow.build", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 30, 
        "Environment": {
          "Variables": {
            "GET_AGENT_BY_EXTENSION_LAMBDA_ARN": {
              "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GetAgentByExtensionLambdaFunction}"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "SOLUTION_ID": {
              "Ref": "SolutionId"
            }, 
            "UUID": {
              "Ref": "Uuid"
            }, 
            "SEND_ANON_DATA": {
              "Ref": "SendAnonymousData"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "BuildContactFlowIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "BuildContactFlowIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "KvsProcessRecordingLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm-java.jar", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentJarPackageVersion"
          }
        }, 
        "Handler": "com.amazonaws.kvstream.KVSProcessRecordingLambda::handleRequest", 
        "Runtime": "java8.al2", 
        "MemorySize": 1024, 
        "Timeout": 900, 
        "Description": "Process recording via CTR\n", 
        "Environment": {
          "Variables": {
            "START_SELECTOR_TYPE": "FRAGMENT_NUMBER", 
            "TRANSCRIBE_REGION": {
              "Ref": "AWS::Region"
            }, 
            "RECORDINGS_KEY_PREFIX": "recordings/", 
            "RECORDINGS_BUCKET_NAME": {
              "Ref": "AudioRecordingsBucket"
            }, 
            "INPUT_KEY_PREFIX": "audio-file-input/", 
            "LOG_RECORDS_FLAG": "TRUE", 
            "RECORDINGS_PUBLIC_READ_ACL": "FALSE", 
            "APP_REGION": {
              "Ref": "AWS::Region"
            }, 
            "CONTACT_VOICEMAIL_TABLE_NAME": {
              "Ref": "ContactVoicemailTable"
            }, 
            "SOLUTION_ID": {
              "Ref": "SolutionId"
            }, 
            "UUID": {
              "Ref": "Uuid"
            }, 
            "SEND_ANON_DATA": {
              "Ref": "SendAnonymousData"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "KvsProcessRecordingIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "KvsProcessRecordingIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "ConnectSyncRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/sync-vm-connect.syncRequestHandler", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 60, 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "SOLUTION_ID": {
              "Ref": "SolutionId"
            }, 
            "UUID": {
              "Ref": "Uuid"
            }, 
            "SEND_ANON_DATA": {
              "Ref": "SendAnonymousData"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "ConnectSyncRequestIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "ConnectSyncRequestIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "ConnectSyncLambdaFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          }, 
          "S3Key": "aws-connect-vm-serverless/aws-connect-vm.zip", 
          "S3ObjectVersion": {
            "Ref": "LambdaDeploymentZipPackageVersion"
          }
        }, 
        "Handler": "handler/sync-vm-connect.syncHandler", 
        "Runtime": "nodejs16.x", 
        "MemorySize": 1024, 
        "Timeout": 900, 
        "Environment": {
          "Variables": {
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable"
            }, 
            "AMAZON_CONNECT_INSTANCE_ARN": {
              "Ref": "AmazonConnectInstanceArn"
            }, 
            "SOLUTION_ID": {
              "Ref": "SolutionId"
            }, 
            "UUID": {
              "Ref": "Uuid"
            }, 
            "SEND_ANON_DATA": {
              "Ref": "SendAnonymousData"
            }
          }
        }, 
        "Role": {
          "Fn::GetAtt": [
            "ConnectSyncIamRole", 
            "Arn"
          ]
        }
      }, 
      "DependsOn": [
        "ConnectSyncIamRole"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Lambda functions will not be deployed inside a VPC for now", 
              "id": "W89"
            }, 
            {
              "reason": "Lambda functions will not define ReservedConcurrentExecutions to reserve simultaneous executions for now", 
              "id": "W92"
            }
          ]
        }
      }
    }, 
    "ConnectSyncEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule", 
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)", 
        "State": "ENABLED", 
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ConnectSyncLambdaFunction", 
                "Arn"
              ]
            }, 
            "Id": "ConnectSyncSchedule"
          }
        ]
      }
    }, 
    "ConnectSyncLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectSyncLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "events.amazonaws.com", 
        "SourceArn": {
          "Fn::GetAtt": [
            "ConnectSyncEventsRuleSchedule1", 
            "Arn"
          ]
        }
      }
    }, 
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi", 
      "Properties": {
        "Name": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "AWS::StackName"
              }, 
              "-", 
              "api"
            ]
          ]
        }, 
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }, 
        "Policy": ""
      }
    }, 
    "ApiGatewayResourceAgents": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "agents", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceAgentsAgentidVar": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAgents"
        }, 
        "PathPart": "{agentId}", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceAgentsSync": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAgents"
        }, 
        "PathPart": "sync", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceGlobal": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "global", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceGlobalSettings": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGlobal"
        }, 
        "PathPart": "settings", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceContact": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi", 
            "RootResourceId"
          ]
        }, 
        "PathPart": "contact", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayResourceContactFlow": {
      "Type": "AWS::ApiGateway::Resource", 
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceContact"
        }, 
        "PathPart": "flow", 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }, 
    "ApiGatewayMethodAgentsOptions": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "AuthorizationType": "NONE", 
        "HttpMethod": "OPTIONS", 
        "MethodResponses": [
          {
            "StatusCode": "200", 
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true, 
              "method.response.header.Access-Control-Allow-Headers": true, 
              "method.response.header.Access-Control-Allow-Methods": true
            }, 
            "ResponseModels": {}
          }
        ], 
        "RequestParameters": {}, 
        "Integration": {
          "Type": "MOCK", 
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          }, 
          "ContentHandling": "CONVERT_TO_TEXT", 
          "IntegrationResponses": [
            {
              "StatusCode": "200", 
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'", 
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'", 
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              }, 
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        }, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgents"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Options method cannot have an authorizer.", 
              "id": "W59"
            }
          ]
        }
      }
    }, 
    "ApiGatewayMethodAgentsAgentidVarOptions": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "AuthorizationType": "NONE", 
        "HttpMethod": "OPTIONS", 
        "MethodResponses": [
          {
            "StatusCode": "200", 
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true, 
              "method.response.header.Access-Control-Allow-Headers": true, 
              "method.response.header.Access-Control-Allow-Methods": true
            }, 
            "ResponseModels": {}
          }
        ], 
        "RequestParameters": {}, 
        "Integration": {
          "Type": "MOCK", 
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          }, 
          "ContentHandling": "CONVERT_TO_TEXT", 
          "IntegrationResponses": [
            {
              "StatusCode": "200", 
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'", 
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'", 
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              }, 
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        }, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgentsAgentidVar"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Options method cannot have an authorizer.", 
              "id": "W59"
            }
          ]
        }
      }
    }, 
    "ApiGatewayMethodGlobalSettingsOptions": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "AuthorizationType": "NONE", 
        "HttpMethod": "OPTIONS", 
        "MethodResponses": [
          {
            "StatusCode": "200", 
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true, 
              "method.response.header.Access-Control-Allow-Headers": true, 
              "method.response.header.Access-Control-Allow-Methods": true
            }, 
            "ResponseModels": {}
          }
        ], 
        "RequestParameters": {}, 
        "Integration": {
          "Type": "MOCK", 
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          }, 
          "ContentHandling": "CONVERT_TO_TEXT", 
          "IntegrationResponses": [
            {
              "StatusCode": "200", 
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'", 
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'", 
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              }, 
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        }, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceGlobalSettings"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Options method cannot have an authorizer.", 
              "id": "W59"
            }
          ]
        }
      }
    }, 
    "ApiGatewayMethodContactFlowOptions": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "AuthorizationType": "NONE", 
        "HttpMethod": "OPTIONS", 
        "MethodResponses": [
          {
            "StatusCode": "200", 
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true, 
              "method.response.header.Access-Control-Allow-Headers": true, 
              "method.response.header.Access-Control-Allow-Methods": true
            }, 
            "ResponseModels": {}
          }
        ], 
        "RequestParameters": {}, 
        "Integration": {
          "Type": "MOCK", 
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          }, 
          "ContentHandling": "CONVERT_TO_TEXT", 
          "IntegrationResponses": [
            {
              "StatusCode": "200", 
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'", 
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'", 
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              }, 
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        }, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactFlow"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Options method cannot have an authorizer.", 
              "id": "W59"
            }
          ]
        }
      }
    }, 
    "ApiGatewayMethodAgentsSyncOptions": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "AuthorizationType": "NONE", 
        "HttpMethod": "OPTIONS", 
        "MethodResponses": [
          {
            "StatusCode": "200", 
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true, 
              "method.response.header.Access-Control-Allow-Headers": true, 
              "method.response.header.Access-Control-Allow-Methods": true
            }, 
            "ResponseModels": {}
          }
        ], 
        "RequestParameters": {}, 
        "Integration": {
          "Type": "MOCK", 
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          }, 
          "ContentHandling": "CONVERT_TO_TEXT", 
          "IntegrationResponses": [
            {
              "StatusCode": "200", 
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'", 
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'", 
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              }, 
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        }, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgentsSync"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Options method cannot have an authorizer.", 
              "id": "W59"
            }
          ]
        }
      }
    }, 
    "ApiGatewayMethodAgentsGet": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "GET", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgents"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "AgentsGetLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodAgentsAgentidVarPost": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "POST", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgentsAgentidVar"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "AgentsUpdateByIdLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodAgentsAgentidVarGet": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "GET", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgentsAgentidVar"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "AgentsGetByIdLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodGlobalSettingsPost": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "POST", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceGlobalSettings"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "GlobalSettingsUpdateLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodGlobalSettingsGet": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "GET", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceGlobalSettings"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "GlobalSettingsGetLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodContactFlowPost": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "POST", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactFlow"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "BuildContactFlowLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "ApiGatewayMethodAgentsSyncPost": {
      "Type": "AWS::ApiGateway::Method", 
      "Properties": {
        "HttpMethod": "POST", 
        "RequestParameters": {}, 
        "ResourceId": {
          "Ref": "ApiGatewayResourceAgentsSync"
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "ApiKeyRequired": false, 
        "AuthorizationType": "CUSTOM", 
        "AuthorizerId": {
          "Ref": "AuthorizerApiGatewayAuthorizer"
        }, 
        "Integration": {
          "IntegrationHttpMethod": "POST", 
          "Type": "AWS_PROXY", 
          "Uri": {
            "Fn::Join": [
              "", 
              [
                "arn:", 
                {
                  "Ref": "AWS::Partition"
                }, 
                ":apigateway:", 
                {
                  "Ref": "AWS::Region"
                }, 
                ":lambda:path/2015-03-31/functions/", 
                {
                  "Fn::GetAtt": [
                    "ConnectSyncRequestLambdaFunction", 
                    "Arn"
                  ]
                }, 
                "/invocations"
              ]
            ]
          }
        }, 
        "MethodResponses": []
      }, 
      "DependsOn": [
        "AuthorizerApiGatewayAuthorizer"
      ]
    }, 
    "AuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer", 
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300, 
        "IdentitySource": "method.request.header.Authorization", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "AWS::StackName"
              }, 
              "-", 
              "authorizer"
            ]
          ]
        }, 
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "IdentityValidationExpression": "Bearer (.*)", 
        "AuthorizerUri": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":apigateway:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":lambda:path/2015-03-31/functions/", 
              {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction", 
                  "Arn"
                ]
              }, 
              "/invocations"
            ]
          ]
        }, 
        "Type": "TOKEN"
      }
    }, 
    "ApiGatewayDeployment1682904611447": {
      "Type": "AWS::ApiGateway::Deployment", 
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }, 
        "StageName": "prod"
      }, 
      "DependsOn": [
        "ApiGatewayMethodAgentsOptions", 
        "ApiGatewayMethodAgentsAgentidVarOptions", 
        "ApiGatewayMethodGlobalSettingsOptions", 
        "ApiGatewayMethodContactFlowOptions", 
        "ApiGatewayMethodAgentsSyncOptions", 
        "ApiGatewayMethodAgentsGet", 
        "ApiGatewayMethodAgentsAgentidVarPost", 
        "ApiGatewayMethodAgentsAgentidVarGet", 
        "ApiGatewayMethodGlobalSettingsPost", 
        "ApiGatewayMethodGlobalSettingsGet", 
        "ApiGatewayMethodContactFlowPost", 
        "ApiGatewayMethodAgentsSyncPost"
      ], 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Updating this field prevents stack updates.", 
              "id": "W45"
            }
          ]
        }
      }
    }, 
    "AgentsGetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgentsGetLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "AuthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "AgentsUpdateByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgentsUpdateByIdLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "AgentsGetByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgentsGetByIdLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "GlobalSettingsUpdateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GlobalSettingsUpdateLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "GlobalSettingsGetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GlobalSettingsGetLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "BuildContactFlowLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BuildContactFlowLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "ConnectSyncRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectSyncRequestLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "apigateway.amazonaws.com", 
        "SourceArn": {
          "Fn::Join": [
            "", 
            [
              "arn:", 
              {
                "Ref": "AWS::Partition"
              }, 
              ":execute-api:", 
              {
                "Ref": "AWS::Region"
              }, 
              ":", 
              {
                "Ref": "AWS::AccountId"
              }, 
              ":", 
              {
                "Ref": "ApiGatewayRestApi"
              }, 
              "/*/*"
            ]
          ]
        }
      }
    }, 
    "ContactVoicemailStreamEventSourceMappingDynamodbContactVoicemailTable": {
      "Type": "AWS::Lambda::EventSourceMapping", 
      "DependsOn": [
        "ContactVoicemailStreamIamRole"
      ], 
      "Properties": {
        "BatchSize": 10, 
        "Enabled": true, 
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ContactVoicemailTable", 
            "StreamArn"
          ]
        }, 
        "FunctionName": {
          "Fn::GetAtt": [
            "ContactVoicemailStreamLambdaFunction", 
            "Arn"
          ]
        }, 
        "StartingPosition": "TRIM_HORIZON"
      }
    }, 
    "KvsProcessRecordingEventSourceMappingKinesisCTRStreamArn": {
      "Type": "AWS::Lambda::EventSourceMapping", 
      "DependsOn": [
        "KvsProcessRecordingIamRole"
      ], 
      "Properties": {
        "BatchSize": 10, 
        "Enabled": true, 
        "EventSourceArn": {
          "Ref": "CTRStreamArn"
        }, 
        "FunctionName": {
          "Fn::GetAtt": [
            "KvsProcessRecordingLambdaFunction", 
            "Arn"
          ]
        }, 
        "StartingPosition": "TRIM_HORIZON", 
        "MaximumBatchingWindowInSeconds": 1
      }
    }, 
    "TranscriptionEventsEventsRuleCloudWatchEvent1": {
      "Type": "AWS::Events::Rule", 
      "Properties": {
        "EventPattern": {
          "source": [
            "aws.transcribe"
          ], 
          "detail-type": [
            "Transcribe Job State Change"
          ], 
          "detail": {
            "TranscriptionJobStatus": [
              "COMPLETED", 
              "FAILED"
            ]
          }
        }, 
        "State": "ENABLED", 
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "TranscriptionEventsLambdaFunction", 
                "Arn"
              ]
            }, 
            "Id": "TranscriptionEventsCloudWatchEvent"
          }
        ]
      }
    }, 
    "TranscriptionEventsLambdaPermissionEventsRuleCloudWatchEvent1": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TranscriptionEventsLambdaFunction", 
            "Arn"
          ]
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "events.amazonaws.com", 
        "SourceArn": {
          "Fn::GetAtt": [
            "TranscriptionEventsEventsRuleCloudWatchEvent1", 
            "Arn"
          ]
        }
      }
    }, 
    "CognitoUserPoolUserPool": {
      "Type": "AWS::Cognito::UserPool", 
      "Properties": {
        "UsernameAttributes": [
          "email"
        ], 
        "Schema": [
          {
            "AttributeDataType": "String", 
            "Mutable": true, 
            "Name": "roles"
          }, 
          {
            "AttributeDataType": "String", 
            "Name": "email", 
            "Mutable": {
              "Ref": "IsSamlInstance"
            }, 
            "Required": true
          }
        ], 
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true
        }, 
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED"
        }
      }
    }, 
    "UserPoolDomain": {
      "Type": "AWS::Cognito::UserPoolDomain", 
      "Properties": {
        "Domain": {
          "Ref": "UserPoolDomainName"
        }, 
        "UserPoolId": {
          "Ref": "CognitoUserPoolUserPool"
        }
      }
    }, 
    "UserPoolAdminGroup": {
      "Type": "AWS::Cognito::UserPoolGroup", 
      "Properties": {
        "GroupName": "Admin", 
        "UserPoolId": {
          "Ref": "CognitoUserPoolUserPool"
        }
      }
    }, 
    "UserPoolManagerGroup": {
      "Type": "AWS::Cognito::UserPoolGroup", 
      "Properties": {
        "GroupName": "Manager", 
        "UserPoolId": {
          "Ref": "CognitoUserPoolUserPool"
        }
      }
    }, 
    "AmazonConnectGetAgentLambdaRights": {
      "Type": "AWS::Lambda::Permission", 
      "Properties": {
        "FunctionName": {
          "Ref": "GetAgentByExtensionLambdaFunction"
        }, 
        "Action": "lambda:InvokeFunction", 
        "Principal": "connect.amazonaws.com"
      }
    }, 
    "CognitoUsersConfig": {
      "Type": "Custom::CognitoUsersConfig", 
      "DependsOn": [
        "CognitoUserPoolUserPool"
      ], 
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CognitoUsersConfigLambdaFunction", 
            "Arn"
          ]
        }, 
        "UUID": "b80696e6-ebc6-4ef5-8064-b3e30163f2cd", 
        "AdminEmail": {
          "Ref": "AdminEmail"
        }, 
        "AdminFirstName": {
          "Ref": "AdminFirstName"
        }, 
        "AdminLastName": {
          "Ref": "AdminLastName"
        }, 
        "ManagerEmail": {
          "Ref": "ManagerEmail"
        }, 
        "ManagerFirstName": {
          "Ref": "ManagerFirstName"
        }, 
        "ManagerLastName": {
          "Ref": "ManagerLastName"
        }
      }
    }, 
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table", 
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "agentId", 
            "AttributeType": "S"
          }, 
          {
            "AttributeName": "extension", 
            "AttributeType": "S"
          }
        ], 
        "KeySchema": [
          {
            "AttributeName": "agentId", 
            "KeyType": "HASH"
          }
        ], 
        "BillingMode": "PAY_PER_REQUEST", 
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "AgentExtensionIndex", 
            "KeySchema": [
              {
                "AttributeName": "extension", 
                "KeyType": "HASH"
              }
            ], 
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ], 
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        }, 
        "SSESpecification": {
          "SSEEnabled": true
        }
      }
    }, 
    "GlobalTable": {
      "Type": "AWS::DynamoDB::Table", 
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceArn", 
            "AttributeType": "S"
          }
        ], 
        "KeySchema": [
          {
            "AttributeName": "instanceArn", 
            "KeyType": "HASH"
          }
        ], 
        "BillingMode": "PAY_PER_REQUEST", 
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        }, 
        "SSESpecification": {
          "SSEEnabled": true
        }
      }
    }, 
    "ContactVoicemailTable": {
      "Type": "AWS::DynamoDB::Table", 
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "contactId", 
            "AttributeType": "S"
          }, 
          {
            "AttributeName": "readerId", 
            "AttributeType": "S"
          }, 
          {
            "AttributeName": "assigneeId", 
            "AttributeType": "S"
          }
        ], 
        "KeySchema": [
          {
            "AttributeName": "contactId", 
            "KeyType": "HASH"
          }, 
          {
            "AttributeName": "readerId", 
            "KeyType": "RANGE"
          }
        ], 
        "BillingMode": "PAY_PER_REQUEST", 
        "SSESpecification": {
          "SSEEnabled": true
        }, 
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        }, 
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }, 
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "AssigneeIdIndex", 
            "KeySchema": [
              {
                "AttributeName": "assigneeId", 
                "KeyType": "HASH"
              }
            ], 
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    }, 
    "AudioRecordingsBucket": {
      "Type": "AWS::S3::Bucket", 
      "Properties": {
        "AccessControl": "LogDeliveryWrite", 
        "VersioningConfiguration": {
          "Status": "Enabled"
        }, 
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true, 
          "BlockPublicPolicy": true, 
          "IgnorePublicAcls": true, 
          "RestrictPublicBuckets": true
        }, 
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }, 
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ], 
              "AllowedHeaders": [
                "*"
              ], 
              "AllowedMethods": [
                "PUT", 
                "HEAD"
              ], 
              "MaxAge": "3000"
            }
          ]
        }, 
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "VoicemailAccessLogBucket"
          }, 
          "LogFilePrefix": "audio-recording-bucket-logs"
        }
      }
    }, 
    "ApiAccessLogGroup": {
      "Type": "AWS::Logs::LogGroup", 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "CloudWatchLogs LogGroup will not specify a KMS Key Id to encrypt the log data for now.", 
              "id": "W84"
            }, 
            {
              "reason": "CloudWatchLogs LogGroup will not specify RetentionInDays to expire the log data for now.", 
              "id": "W86"
            }
          ]
        }
      }
    }, 
    "ApiGwIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        ]
      }
    }, 
    "ApiGwAccountConfig": {
      "Type": "AWS::ApiGateway::Account", 
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGwIamRole", 
            "Arn"
          ]
        }
      }
    }, 
    "ContactVoicemailStreamIamRole": {
      "DependsOn": [
        "VoicemailSecret"
      ], 
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "ContactVoicemailStreamPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "ses:SendRawEmail"
                  ], 
                  "Resource": "*"
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "sns:Publish"
                  ], 
                  "NotResource": "arn:aws:sns:*:*:*"
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "transcribe:GetTranscriptionJob"
                  ], 
                  "Resource": "*"
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:DescribeStream", 
                    "dynamodb:GetRecords", 
                    "dynamodb:GetShardIterator", 
                    "dynamodb:ListStreams"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ContactVoicemailTable", 
                        "StreamArn"
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:GetItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GlobalTable", 
                        "Arn"
                      ]
                    }, 
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:DescribeUser"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Ref": "AmazonConnectInstanceArn"
                        }, 
                        "/agent/*"
                      ]
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "s3:GetObject", 
                    "s3:GetSignedUrl"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Fn::GetAtt": [
                            "AudioRecordingsBucket", 
                            "Arn"
                          ]
                        }, 
                        "/*"
                      ]
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ], 
                  "Resource": {
                    "Ref": "VoicemailSecret"
                  }
                }
              ]
            }
          }
        ]
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "NotResource needed to send SMS from SNS.", 
              "id": "W21"
            }, 
            {
              "reason": "Must allow all resources for transcribe.", 
              "id": "W11"
            }, 
            {
              "reason": "IAM policy needs the verbosity.", 
              "id": "W76"
            }
          ]
        }
      }
    }, 
    "TranscriptionEventsIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "TranscriptionEventsPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:Query", 
                    "dynamodb:UpdateItem"
                  ], 
                  "Resource": {
                    "Fn::GetAtt": [
                      "ContactVoicemailTable", 
                      "Arn"
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ], 
                  "Resource": {
                    "Ref": "VoicemailSecret"
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "GetAgentByExtensionIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "GetAgentByExtensionPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:Query"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Fn::GetAtt": [
                            "UsersTable", 
                            "Arn"
                          ]
                        }, 
                        "/index/*"
                      ]
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:ListUsers", 
                    "connect:DescribeUser"
                  ], 
                  "Resource": [
                    {
                      "Ref": "AmazonConnectInstanceArn"
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          {
                            "Ref": "AmazonConnectInstanceArn"
                          }, 
                          "/agent/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "CognitoUsersConfigIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "CognitoUsersConfigPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "cognito-idp:AdminCreateUser", 
                    "cognito-idp:AdminDeleteUser", 
                    "cognito-idp:AdminGetUser", 
                    "cognito-idp:AdminAddUserToGroup"
                  ], 
                  "Resource": {
                    "Fn::GetAtt": [
                      "CognitoUserPoolUserPool", 
                      "Arn"
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:PutItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GlobalTable", 
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "AuthorizerIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "AuthorizerPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "AgentsGetIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "AgentsGetPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:Scan"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "AgentsUpdateByIdIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "AgentsUpdateByIdPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:GetItem", 
                    "dynamodb:PutItem", 
                    "dynamodb:Query", 
                    "dynamodb:UpdateItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }, 
                    {
                      "Fn::Join": [
                        "", 
                        [
                          {
                            "Fn::GetAtt": [
                              "UsersTable", 
                              "Arn"
                            ]
                          }, 
                          "/index/*"
                        ]
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:DescribeUser"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Ref": "AmazonConnectInstanceArn"
                        }, 
                        "/agent/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "AgentsGetByIdIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "AgentsGetByIdPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:GetItem", 
                    "dynamodb:PutItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:ListUsers", 
                    "connect:DescribeUser"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Ref": "AmazonConnectInstanceArn"
                        }, 
                        "/agent/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "GlobalSettingsUpdateIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "GlobalSettingsUpdatePolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:GetItem", 
                    "dynamodb:PutItem", 
                    "dynamodb:UpdateItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GlobalTable", 
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "GlobalSettingsGetIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "GlobalSettingsGetPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:GetItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GlobalTable", 
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }, 
    "BuildContactFlowIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "BuildContactFlowPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:ListQueues"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Ref": "AmazonConnectInstanceArn"
                        }, 
                        "/queue/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "KvsProcessRecordingIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "KvsProcessRecordingPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "transcribe:GetTranscriptionJob", 
                    "transcribe:StartTranscriptionJob"
                  ], 
                  "Resource": "*"
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "kinesis:GetMedia", 
                    "kinesis:GetRecords", 
                    "kinesis:GetShardIterator", 
                    "kinesis:DescribeStream", 
                    "kinesis:ListStreams"
                  ], 
                  "Resource": {
                    "Ref": "CTRStreamArn"
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "kms:Decrypt"
                  ], 
                  "Resource": {
                    "Ref": "KMSKeyArn"
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:PutItem"
                  ], 
                  "Resource": {
                    "Fn::GetAtt": [
                      "ContactVoicemailTable", 
                      "Arn"
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "s3:PutObject", 
                    "s3:GetObject", 
                    "s3:PutObjectAcl"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Fn::GetAtt": [
                            "AudioRecordingsBucket", 
                            "Arn"
                          ]
                        }, 
                        "/*"
                      ]
                    ]
                  }
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "kinesisvideo:GetMedia", 
                    "kinesisvideo:GetDataEndpoint"
                  ], 
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "reason": "Must allow all resources for kinesis video streams.", 
              "id": "W11"
            }
          ]
        }
      }
    }, 
    "ConnectSyncRequestIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "ConnectSyncRequestPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:Scan", 
                    "dynamodb:BatchWriteItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:ListUsers"
                  ], 
                  "Resource": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "ConnectSyncIamRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "Path": "/", 
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }, 
              "Action": "sts:AssumeRole"
            }
          ]
        }, 
        "Policies": [
          {
            "PolicyName": "ConnectSyncPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "logs:CreateLogGroup", 
                    "logs:CreateLogStream", 
                    "logs:PutLogEvents"
                  ], 
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "dynamodb:Scan", 
                    "dynamodb:BatchWriteItem"
                  ], 
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable", 
                        "Arn"
                      ]
                    }
                  ]
                }, 
                {
                  "Effect": "Allow", 
                  "Action": [
                    "connect:ListUsers"
                  ], 
                  "Resource": {
                    "Ref": "AmazonConnectInstanceArn"
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "VoicemailIamUser": {
      "DependsOn": [
        "VoicemailIamUserGroup"
      ], 
      "Type": "AWS::IAM::User", 
      "Properties": {
        "Groups": [
          {
            "Ref": "VoicemailIamUserGroup"
          }
        ]
      }
    }, 
    "VoicemailIamUserGroup": {
      "Type": "AWS::IAM::Group", 
      "Properties": {
        "Policies": [
          {
            "PolicyName": "VoicemailIamPolicy", 
            "PolicyDocument": {
              "Version": "2012-10-17", 
              "Statement": [
                {
                  "Effect": "Allow", 
                  "Action": [
                    "s3:GetObject", 
                    "s3:GetSignedUrl"
                  ], 
                  "Resource": {
                    "Fn::Join": [
                      "", 
                      [
                        {
                          "Fn::GetAtt": [
                            "AudioRecordingsBucket", 
                            "Arn"
                          ]
                        }, 
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }, 
    "VoicemailIamUserAccessKey": {
      "DependsOn": [
        "VoicemailIamUser"
      ], 
      "Type": "AWS::IAM::AccessKey", 
      "Properties": {
        "UserName": {
          "Ref": "VoicemailIamUser"
        }
      }
    }, 
    "VoicemailSecret": {
      "DependsOn": [
        "VoicemailIamUser", 
        "VoicemailIamUserAccessKey"
      ], 
      "Type": "AWS::SecretsManager::Secret", 
      "Properties": {
        "Description": "IAM Access Key Secret", 
        "SecretString": {
          "Fn::Join": [
            "", 
            [
              "{\"accessKeyId\":", 
              "\"", 
              {
                "Ref": "VoicemailIamUserAccessKey"
              }, 
              "\"", 
              ",\"secretAccessKey\":", 
              "\"", 
              {
                "Fn::GetAtt": [
                  "VoicemailIamUserAccessKey", 
                  "SecretAccessKey"
                ]
              }, 
              "\"}"
            ]
          ]
        }
      }, 
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W77", 
              "reason": "Uses the account's default AWS managed CMK for Secrets Manager\u00b7"
            }
          ]
        }
      }
    }, 
    "ApiGatewayApiKey1": {
      "Type": "AWS::ApiGateway::ApiKey", 
      "Properties": {
        "Enabled": true, 
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }, 
            "StageName": "prod"
          }
        ]
      }, 
      "DependsOn": [
        "ApiGatewayDeployment1682904611447"
      ]
    }, 
    "ApiGatewayUsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan", 
      "DependsOn": [
        "ApiGatewayDeployment1682904611447"
      ], 
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            }, 
            "Stage": "prod"
          }
        ], 
        "Description": "Usage plan for aws-connect-vm prod stage", 
        "Throttle": {
          "BurstLimit": 500, 
          "RateLimit": 50
        }
      }
    }, 
    "ApiGatewayUsagePlanKey1": {
      "Type": "AWS::ApiGateway::UsagePlanKey", 
      "Properties": {
        "KeyId": {
          "Ref": "ApiGatewayApiKey1"
        }, 
        "KeyType": "API_KEY", 
        "UsagePlanId": {
          "Ref": "ApiGatewayUsagePlan"
        }
      }
    }, 
    "AudioRecordingsBucketReadPolicy": {
      "Type": "AWS::S3::BucketPolicy", 
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject", 
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${AudioRecordingsBucket}/*"
              }, 
              "Effect": "Allow", 
              "Principal": {
                "AWS": {
                  "Ref": "AWS::AccountId"
                }
              }
            }, 
            {
              "Action": "s3:*", 
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${AudioRecordingsBucket}/*"
              }, 
              "Effect": "Deny", 
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              }, 
              "Principal": "*"
            }
          ]
        }, 
        "Bucket": {
          "Ref": "AudioRecordingsBucket"
        }
      }
    }
  }, 
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }, 
      "Export": {
        "Name": "sls-aws-connect-vm-prod-ServerlessDeploymentBucketName"
      }
    }, 
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint", 
      "Value": {
        "Fn::Join": [
          "", 
          [
            "https://", 
            {
              "Ref": "ApiGatewayRestApi"
            }, 
            ".execute-api.", 
            {
              "Ref": "AWS::Region"
            }, 
            ".", 
            {
              "Ref": "AWS::URLSuffix"
            }, 
            "/prod"
          ]
        ]
      }, 
      "Export": {
        "Name": "sls-aws-connect-vm-prod-ServiceEndpoint"
      }
    }, 
    "ApiGatewayApiKey": {
      "Value": {
        "Fn::GetAtt": [
          "ApiGatewayApiKey1", 
          "APIKeyId"
        ]
      }
    }, 
    "CognitoDomain": {
      "Value": {
        "Fn::Sub": "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
      }
    }, 
    "UserPoolId": {
      "Value": {
        "Ref": "CognitoUserPoolUserPool"
      }
    }, 
    "UserPoolArn": {
      "Value": {
        "Fn::GetAtt": [
          "CognitoUserPoolUserPool", 
          "Arn"
        ]
      }
    }
  }, 
  "Parameters": {
    "AmazonConnectInstanceArn": {
      "Type": "String", 
      "Default": "", 
      "Description": "The ARN of your Amazon Connect Instance"
    }, 
    "CTRStreamArn": {
      "Description": "CTR Data Stream ARN", 
      "Type": "String"
    }, 
    "KMSKeyArn": {
      "Description": "The ARN of your KMS key on the CTR Stream", 
      "Type": "String"
    }, 
    "DeliveryEmail": {
      "Description": "Transcription delivery email. Make sure this email is verified", 
      "Default": "", 
      "Type": "String"
    }, 
    "AvailableSMSCountries": {
      "Default": "us,ca", 
      "Type": "String"
    }, 
    "AdminEmail": {
      "Default": "", 
      "Type": "String"
    }, 
    "AdminFirstName": {
      "Default": "", 
      "Type": "String"
    }, 
    "AdminLastName": {
      "Default": "", 
      "Type": "String"
    }, 
    "ManagerEmail": {
      "Default": "", 
      "Type": "String"
    }, 
    "ManagerFirstName": {
      "Default": "", 
      "Type": "String"
    }, 
    "ManagerLastName": {
      "Default": "", 
      "Type": "String"
    }, 
    "SignedRecordingUrlExpiration": {
      "Default": 900, 
      "Type": "String"
    }, 
    "UserPoolDomainName": {
      "Default": "", 
      "Type": "String"
    }, 
    "SolutionId": {
      "Default": "", 
      "Type": "String"
    }, 
    "Uuid": {
      "Default": "", 
      "Type": "String"
    }, 
    "VoicemailAccessLogBucket": {
      "Default": "VoicemailAccessLogBucket", 
      "Type": "String"
    }, 
    "SendAnonymousData": {
      "Default": "", 
      "Type": "String"
    }, 
    "IsSamlInstance": {
      "Default": false, 
      "Type": "String", 
      "AllowedValues": [
        true, 
        false
      ]
    }, 
    "ServerlessDeploymentBucket": {
      "Default": "", 
      "Type": "String", 
      "Description": "The bucket to which the lambda zips are deployed to"
    }, 
    "LambdaDeploymentJarPackageVersion": {
      "Default": "", 
      "Type": "String", 
      "Description": "S3 Object Version of the Lambda Deployment Jar Package"
    }, 
    "LambdaDeploymentZipPackageVersion": {
      "Default": "", 
      "Type": "String", 
      "Description": "S3 Object Version of the Lambda Deployment Zip Package"
    }
  }
}